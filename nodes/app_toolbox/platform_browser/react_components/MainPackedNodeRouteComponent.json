{
  "type": "react_component:0.0.1:local:98912hd89",
  "name": "MainPackedNodeRouteComponent",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Link = universe.ReactRouterDomLink;\n      \n      class EmbeddedComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              embeddedComponenthere\n            </div>\n          )\n        }\n      }\n      \n      let ErrorComponent = (name) => {\n        return class ErrorComponent extends React.Component {\n          constructor(props){\n            super(props);\n          }\n          render(){\n            return (\n              <div>\n                ErrorLoading: {name || 'unknown'}\n              </div>\n            )\n          }\n        }\n      }\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            browserList: null,\n            remoteList: null,\n            mainEditor: null,\n            remoteFriendList: null,\n            remoteFriendDataList: null\n            // browser: null,\n          }\n        }\n        \n        componentDidMount(){\n          return new Promise(async (resolve,reject)=>{\n              \n              if(!this.props.state.codePackageNode){\n                this.props.history.push('/');\n                return;\n              }\n              await this.loadComponents();\n              \n          });\n        }\n        \n        @autobind\n        async loadComponents(){\n          \n          // Not async for setState! \n          \n          let components = [\n            'ListFromNodeComponent',\n            'NodeEditorComponent'\n          ];\n          \n          for(let componentInternalId of components){\n            try {\n                \n              let Component = await this.props.loadComponent({\n                internalId: componentInternalId\n              });\n              let obj = {};\n              obj[componentInternalId] = Component;\n              this.setState(obj)\n              // console.log(componentInternalId,Component);\n              \n            }catch(err){\n              console.error(\"Failed loading component:\",componentInternalId,err);\n            }\n          }\n          \n        }\n        \n        @autobind\n        handleTest(){\n          this.setState({\n            value: this.state.value + 1\n          })\n        }\n        \n        @autobind\n        async handleClearMemory(){\n          \n          await universe.clearMemory();\n          WINDOW.location.reload();\n          \n        }\n        \n        \n        render(){\n          \n          const ListFromNodeComponent = this.state.ListFromNodeComponent || ErrorComponent('ListFromNodeComponent');\n          const NodeEditorComponent = this.state.NodeEditorComponent || ErrorComponent('NodeEditorComponent');\n          \n          return (\n            <div className=\"full-screen\" style={styles.fullScreen}>\n              <div className=\"flex-main\">\n                <div className=\"flex-left\" style={{padding:'4px', width: '450px'}}>\n                  \n                  <div>\n                    <ListFromNodeComponent />\n                  </div>\n                  \n                </div>\n                <div className=\"flex-middle\">\n                  \n                  {\n                    this.props.state.packageEditingNode ?\n                    <RecreateChildOnPropsChange \n                        node={this.props.state.packageEditingNode}\n                        editorComponent={NodeEditorComponent}\n                      >\n                      <NodeEditorComponent\n                        node={this.props.state.packageEditingNode}\n                      />\n                    </RecreateChildOnPropsChange>\n                    :''\n                  }\n                  \n                </div>\n              </div>\n            </div>\n          )\n        }\n      }\n      \n      const styles = {\n        fullScreen: {\n          position: 'absolute',\n          top: '52px',\n          bottom: 0,\n          left: 0,\n          width: '100%',\n          height: 'auto'\n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      mycomponent = universe.ReactRouterDomWithRouter(mycomponent);\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "MainPackedNodeRouteComponent",
    "key": "8bc920aa-8269-4e09-afba-c36119da7114",
    "version": "1",
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----"
  }
}