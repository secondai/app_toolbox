{
  "type": "react_component:0.0.1:local:98912hd89",
  "name": "MainComponent",
  "data": {
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----",
    "version": "2",
    "key": "3ae95ba5-2d74-4fa4-846d-768b503c398b",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Router = universe.ReactRouterDomRouter;\n      const Route = universe.ReactRouterDomRoute;\n      const Switch = universe.ReactRouterDomSwitch;\n      \n      class EmbeddedComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              embeddedComponenthere\n            </div>\n          )\n        }\n      }\n      \n      let ErrorComponent = (name) => {\n        return class ErrorComponent extends React.Component {\n          constructor(props){\n            super(props);\n          }\n          render(){\n            return (\n              <div>\n                ErrorLoading: {name || 'unknown'}\n              </div>\n            )\n          }\n        }\n      }\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            loginUrl: '/auth/google?onlogin=/metadatas'\n          }\n        }\n        \n        componentDidMount(){\n          \n          console.log('MainComponent didMount');\n          \n          this.startUp();\n            \n            \n        }\n        \n        @autobind\n        async startUp(){\n          \n          WINDOW.appBaseUrl = WINDOW.appBaseUrl || '/metadatas';\n          \n          // Fetch default nodes (Language NodeChain, Identity, etc.) \n          await this.fetchDefaultNodes();\n          \n          // if identity includes a logged-in profile\n          // - show the main page \n          // - else: \n          //   - see if hash exists in url (token, after login) \n          //   - redirect to login if no hash to process\n          await this.processLogin();\n          \n          await this.loadComponents();\n          \n          console.log('MainComponent loaded startUp');\n        \n        }\n        \n        @autobind\n        processLogin(){\n          // handling multiple starting states \n          \n          return new Promise(async (resolve,reject)=>{\n              \n            // update the token for the local user\n            let OwnerSecondExternalIdentityNode = this.props.state.OwnerSecondExternalIdentityNode;\n            if(!OwnerSecondExternalIdentityNode){\n              console.error('Uh oh, missing OwnerSecondExternalIdentityNode');\n              return;\n            }\n            \n            if(OwnerSecondExternalIdentityNode.data.isLoggedIn){\n              // all good\n              console.log('All good, has identity!');\n              \n              return resolve(true);\n              // return;\n              \n            } else {\n              // not logged in yet, might be processing incoming hash/token \n              let hash = WINDOW.location.hash;\n              \n              let newToken = (hash || '').split('token=');\n              console.log('newToken1', newToken);\n              if(newToken.length > 1){\n                newToken = newToken[newToken.length-1];\n              } else {\n                newToken = null;\n              }\n              \n              // clear hash \n              WINDOW.location.hash = '';\n              \n              if(!newToken){ \n                // no token, redirect to login \n                console.log('No token (before login!)');\n                \n                this.setState({\n                  renderLogin: true\n                });\n                \n                // prevents more components loading...\n                return false;\n                \n                \n              } else {\n                \n                // token in hash, processing login (after redirect) \n                console.log('newToken2', newToken);\n                \n                let passphrase = newToken;\n                \n                try {\n                  \n                // Authenticate with External Second \n                // - make authenticated requests to a Second (necessary for Learning?) \n                //   - should have ALL requests authenticated \n                // universe.setupExternalSecond();\n                \n                  // Run the entire authentication handshake with the pre-existing ExternalIdentity Node \n                  // - creates external_identity on remote \n                  // - updates external_identity locally ( in browser), to include \"token\" (encrypted {} on remote) \n                  let authExternalIdentityNode2 = await universe.loadAndRunCapability('IdentifyInitiate',{},{\n                    type: 'standard_capability_action:0.0.1:local:298j291bs',\n                    data: {\n                      action: 'start',\n                      options: {\n                        externalIdentityPublicKey: OwnerSecondExternalIdentityNode.data.publicKey,\n                        // authToken: 'eeaac41bdb1b717d137a53779db97457:07e0fbe19e72c3ff7e329fc293bcf5b51d780c4c3c60f80403b2fea8f30d0daa5e4891dbdd6c57d9844622078a681853f31202d0632f0ee95031c9369a60708ddb6220e248e3c2ec6b3bb3c00eb2425aea922351d7128ef333ea5fe6a8ad139c1978759e29b057db1e655f2fe7c8962e' // \"learn\" \n                      }\n                    }\n                  });\n                  \n                  console.log('Finished IdentifyInitiate2. Starting IdentifyActAsInternalUser');\n                  \n                  // Update the local external_identity.data.token \n                  // - doesnt change anything on the remote! \n                  // - only changes the local encrypted \"token\" to included an internalUserId (gets new token from remote. token not stored anywhere) \n                  let actAsNode = await universe.loadAndRunCapability('IdentifyActAsInternalUser',{},{\n                    type: 'standard_capability_action:0.0.1:local:298j291bs',\n                    data: {\n                      action: 'start',\n                      options: {\n                        externalIdentityPublicKey: OwnerSecondExternalIdentityNode.data.publicKey,\n                        internalUserPassphrase: passphrase\n                      }\n                    }\n                  });\n                  console.log('Finished Upgrading local identity with ActAs. actAsNode Response', actAsNode);\n                }catch(err){\n                  console.error('Failed upgrading ActAs after login');\n                }\n                \n                // re-fetch OwnerSecondExternalIdentityNode after being updated! \n                // - otherwise, overwrites \"actas\" changes \n                await this.fetchDefaultNodes();\n                OwnerSecondExternalIdentityNode = this.props.state.OwnerSecondExternalIdentityNode;\n                \n                // Update OwnerSecondExternalIdentityNode.data.isLoggedIn\n                OwnerSecondExternalIdentityNode.data.isLoggedIn = true;\n                await universe.updateNode(OwnerSecondExternalIdentityNode);\n                \n                this.props.setState({\n                  OwnerSecondExternalIdentityNode\n                });\n                \n                console.log('Updated OwnerSecondExternalIdentityNode');\n                \n                // reload, again?\n                \n                // finished upgrading local token \n                return resolve(true);\n                \n                \n              }\n              \n            }\n          \n          });\n        \n          \n        }\n        \n        @autobind\n        async loadComponents(){\n          \n          // Not async for setState! \n          \n          let components = [\n            'DefaultLayout',\n            'MainHomeComponent',\n          ];\n          \n          for(let componentInternalId of components){\n            try {\n                \n              let Component = await this.props.loadComponent({\n                internalId: componentInternalId\n              });\n              let obj = {};\n              obj[componentInternalId] = Component;\n              this.setState(obj)\n              // console.log(componentInternalId,Component);\n              \n            }catch(err){\n              console.error(\"Failed loading component:\",componentInternalId);\n            }\n          }\n          \n        }\n        \n        @autobind\n        fetchDefaultNodes(){\n          // used elsewhere in the app \n          \n          return new Promise(async (resolve,reject)=>{\n              \n            // Cloud Second's main identity, from internal \n            let ExternalIdentityNodes = await universe.searchMemory({\n              filter: {\n                sqlFilter: {\n                  type: 'external_identity:0.0.1:local:8982f982j92',\n                  data: {\n                    commonName: 'main'\n                  }\n                }\n              }\n            });\n            let OwnerSecondExternalIdentityNode = ExternalIdentityNodes[0];\n            \n            this.props.setState({\n              OwnerSecondExternalIdentityNode\n            }, resolve);\n            \n          });\n          \n        }\n        \n        render(){\n          \n          const DefaultLayout = this.state.DefaultLayout || ErrorComponent('DefaultLayout');\n          const MainHomeComponent = this.state.MainHomeComponent || ErrorComponent('MainHomeComponent');\n          \n          if(this.state.renderLogin){\n            return (\n              <div className=\"section\">\n                <div className=\"container\">\n                  <div className=\"columns\">\n                    <div className=\"column is-4 is-offset-4\">\n                    \n                      <h3 className=\"title is-5\">\n                        Log In\n                      </h3>\n                      <a href={this.state.loginUrl}>\n                        click here to login\n                      </a>\n                      \n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          }\n          \n          return (\n            <Router basename={WINDOW.appBaseUrl}>\n              <Switch>\n              \n                <DefaultLayout exact path=\"/\" component={MainHomeComponent}/>\n                \n              </Switch>\n            </Router>\n          )\n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "MainComponent"
  }
}