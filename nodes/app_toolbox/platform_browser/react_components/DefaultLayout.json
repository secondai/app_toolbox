{
  "type": "react_component:0.0.1:local:98912hd89",
  "name": "DefaultLayout",
  "data": {
    "version": "10",
    "key": "892b33a9-4177-45be-b818-f36600a9d3d0",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Router = universe.ReactRouterDomRouter;\n      const Route = universe.ReactRouterDomRoute;\n      const Switch = universe.ReactRouterDomSwitch;\n      \n      const Link = universe.ReactRouterDomLink;\n      \n      const Dock = universe.ReactDock;\n      \n      class EmbeddedComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              embeddedComponenthere\n            </div>\n          )\n        }\n      }\n      \n      \n      let ErrorComponent = (name) => {\n        return class ErrorComponent extends React.Component {\n          constructor(props){\n            super(props);\n          }\n          render(){\n            return (\n              <div>\n                ErrorLoading: {name || 'unknown'}\n              </div>\n            )\n          }\n        }\n      }\n          \n      \n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props)\n          this.state = {};\n          \n          // WINDOW.UpdateApp = this.handleUpdateApp;\n          // WINDOW.UpdateAppRemote = this.handleUpdateRemote;\n          \n          this.loadComponents();\n          \n        }\n        \n        @autobind\n        componentDidMount(){\n          this.fetchPrivateName();\n          \n          if(this.props.initEditComponent){\n            this.props.initEditComponent(this);\n          }\n          \n          // universe.setTimeout(()=>{\n          //   this.props.setState({\n          //     dockIsVisible: true\n          //   });\n          // },5000);\n          \n        }\n        \n        @autobind\n        async loadComponents(){\n          \n          // Not async for setState! \n          \n          let components = [\n            'MainDockEditorComponent'\n          ];\n          \n          for(let componentInternalId of components){\n            try {\n                \n              let Component = await this.props.loadComponent({\n                internalId: componentInternalId\n              });\n              let obj = {};\n              obj[componentInternalId] = Component;\n              this.setState(obj)\n              // console.log(componentInternalId,Component);\n              \n            }catch(err){\n              console.error(\"Failed loading component:\",componentInternalId);\n            }\n          }\n          \n        }\n        \n        @autobind\n        fetchPrivateName(){\n          \n          return new Promise(async (resolve, reject)=>{\n            \n            // console.log('OwnerSecondExternalIdentityNode:', this.props.state.OwnerSecondExternalIdentityNode);\n            \n            try {\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          {\n                            matchActionType: 'search_internal_datasource:0.0.1:local:2h3ufih8s9h2f',\n                            dataForAction: {\n                              type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                              data: {\n                                dataFilter: {\n                                  nodeId: null, // root-level (not inside a shared node) \n                                  'type' : {\n                                    $like: 'identity_private:'\n                                  }\n                                },\n                                matchFunctionNode: null,\n                                matchFunctionNode_OLD: {\n                                  // query here!\n                                  // action_pointer:0.0.1:local:238972ncr\n                                  type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n                                  data: {\n                                    code: `(()=>{\n                                      // Action \n                                      // - childNode common_type:0.0.1:local:298fh29h2323f == \"action\" \n                                      \n                                      let inputNode = INPUT.data.inputNode;\n                                      \n                                      if(inputNode.nodeId){\n                                        return false;\n                                      }\n                                      \n                                      if(inputNode.type != 'identity_private:0.0.1:local:3298f2j398233'){\n                                        return false;\n                                      }\n                                      return inputNode;\n                                      \n                                    })()`\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              // let nodes = universe.lodash.find(response.data.actionResponses[0].data[0].nodes,{type: 'code:0.0.1:local:32498h32f2'});\n              let nodes = response.data.actionResponses[0].data;\n              \n              let privateNode = nodes[0];\n              console.log('PrivateNode:', privateNode);\n              \n              this.props.setState({\n                privateNode\n              })\n              \n              \n            } catch(err){\n              console.error('Failed getting local nodes');\n            }\n          });\n        }\n        \n        @autobind\n        async handleUpdateApp(){\n          \n          // update local app_base from remote app_base \n          // - updates each node, according to name/path (NOT id) \n          \n          if(!WINDOW.UpdateApp){\n            console.error('Missing WINDOW.UpdateApp (should be in MainComponent)');\n            return false;\n          }\n          \n          WINDOW.UpdateApp();\n          \n          // this.setState({\n          //   updatingLocal: true\n          // });\n          \n          // let localAppBases = await universe.searchMemory({\n          //   filter: {\n          //     filterNodes: tmpNodes=>{\n          //       // this runs isolated, outside of the above context? (not sure) \n          //       return new Promise((resolve, reject)=>{\n          //         tmpNodes = tmpNodes.filter(tmpNode=>{\n          //           if(tmpNode.nodeId){\n          //             return false;\n          //           }\n          //           if(tmpNode.type.split(':')[0] != 'app_base'){\n          //             return false;\n          //           }\n          //           return true;\n          //         });\n          //         resolve(tmpNodes);\n          //       });\n          //     },\n          //   }\n          // });\n          // let localAppBase = localAppBases[0];\n          \n          // console.log('localAppBase:',localAppBase);\n          \n          // // Get app_base from remote \n          // let remoteAppBaseNode;\n        \n          // try {\n            \n          //   let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n          //     type: 'standard_capability_action:0.0.1:local:298j291bs',\n          //     data: {\n          //       action: 'send',\n          //       options: {\n          //         ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n          //         RequestNode: {\n          //           type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n          //           data: {\n          //             actions: [\n          //               {\n          //                 matchActionType: 'search_internal_datasource:0.0.1:local:2h3ufih8s9h2f',\n          //                 dataForAction: {\n          //                   type: 'standard_query_request:0.0.1:local:65723f2khfds',\n          //                   data: {\n          //                     matchFunctionNode: {\n          //                       // query here!\n          //                       // action_pointer:0.0.1:local:238972ncr\n          //                       type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n          //                       data: {\n          //                         code: `(()=>{\n          //                           // Action \n          //                           // - childNode common_type:0.0.1:local:298fh29h2323f == \"action\" \n                                    \n          //                           let inputNode = INPUT.data.inputNode;\n                                    \n          //                           if(inputNode.nodeId){\n          //                             return false;\n          //                           }\n                                    \n          //                           if(inputNode.type.split(':')[0] != 'app_base'){\n          //                             return false;\n          //                           }\n          //                           if(inputNode.name != '${localAppBase.name}'){\n          //                             return false;\n          //                           }\n                                    \n          //                           // Only return children platform_nodes for \"browser\" \n          //                           inputNode.nodes = inputNode.nodes.filter(node=>{\n          //                             if(node.type.split(':')[0] == 'platform_nodes' && \n          //                               node.data.platform != 'browser'){\n          //                                 return false;\n          //                             }\n          //                             return true;\n          //                           });\n                                    \n          //                           return inputNode;\n                                    \n          //                         })()`\n          //                       }\n          //                     }\n          //                   }\n          //                 }\n          //               }\n          //             ]\n                      \n          //           }\n          //         }\n          //       }\n          //     }\n          //   });\n            \n          //   // let nodes = universe.lodash.find(response.data.actionResponses[0].data[0].nodes,{type: 'code:0.0.1:local:32498h32f2'});\n          //   let remoteNodes = response.data.actionResponses[0].data;\n            \n          //   // expecting a single result!\n          //   remoteAppBaseNode = remoteNodes[0];\n            \n          //   console.log('App nodes on Remote:', remoteNodes);\n            \n          // }catch(err){\n          //   console.error('Failed getting local nodes');\n          //   return;\n          // }\n          \n          \n          // // Delete local app_base\n          // console.log('Delete localAppBase');\n          // await universe.removeNode(localAppBase._id);\n          \n          // // Forcing updates at the moment (overwriting local app_base entirely) \n          // // - TODO: show a diff! \n          // // - TODO: only overwrite platform_nodes where platform=browser ? \n          \n              \n          // console.log('Save remoteAppBase to local');\n          // const saveChildNodes = (nodeId, childNodes) => {\n          //   return new Promise(async (resolve, reject)=>{\n    \n          //     console.log('Saving children');\n              \n          //     for(let tmpNode of childNodes){\n          //       let newChildNode = {\n          //         nodeId,\n          //         name: tmpNode.name,\n          //         type: tmpNode.type,\n          //         data: tmpNode.data,\n          //       }\n          //       let savedChildNode = await universe.newNode(newChildNode);\n          //       console.log('savedChildNode', savedChildNode);\n          //       if(tmpNode.nodes && tmpNode.nodes.length){\n    \n          //         await saveChildNodes(savedChildNode._id, tmpNode.nodes || []);\n    \n          //       }\n          //     }\n          //     resolve();\n          //   });\n          // }\n          // await saveChildNodes(null, [remoteAppBaseNode]);\n          \n          // console.log('Completed local update');\n          \n          // this.setState({\n          //   updatingLocal: false\n          // });\n          \n          // // Could reload all? \n          // // let answer = WINDOW.prompt('Reload?');\n          // // if(answer){\n          //   setTimeout(()=>{\n          //     WINDOW.location.reload();\n          //   },1000);\n          // // }\n          \n        }\n        \n        @autobind\n        async handleUpdateApp_OLD(){\n          \n          // get Code and React ids from local\n          // - fetch new from Teacher \n          \n          \n          // run Capability: Teacher.updateLocal\n          // - learn from Remote \n          // universe.loadAnd\n          \n          \n          this.setState({\n            updatingLocal: true\n          });\n        \n          let response = await universe.loadAndRunCapability('Teacher',{},{\n            type: 'standard_capability_action:0.0.1:local:298j291bs',\n            data: {\n              action: 'updateLocalCode',\n              options: {}\n            }\n          });\n          \n          // Iterate over returned \"to Update\" nodes \n          let toUpdate = response.data || [];\n          \n          console.log('Got local toUpdate', toUpdate.length, toUpdate);\n          \n          let answer;\n          try {\n            answer = WINDOW.prompt(`Overwrite local with Updates? ${toUpdate.length} changed. (y/reload)`,'reload');\n            if(!answer || ['reload','y'].indexOf(answer) === -1){\n              this.setState({\n                updatingLocal: false\n              });\n              return false;\n            }\n          }catch(err){\n            console.error(err);\n            this.setState({\n              updatingLocal: false\n            });\n            return false;\n          }\n          \n          console.log('Updating (saving locally)');\n          \n          // overwrite...\n          for(let data of toUpdate){\n            let nodeToSave = data.old;\n            nodeToSave.data.code = data.new.data.code;\n            \n            console.log('Updating Local NodeToSave:', nodeToSave);\n            let updatedNode = await universe.updateNode(nodeToSave);\n          }\n          \n          this.setState({\n            updatingLocal: false\n          });\n          \n          if(answer == 'reload'){\n            setTimeout(()=>{\n              WINDOW.location.reload();\n            },1000);\n          }\n          \n        }\n        \n        @autobind\n        handleUpdateRemote(){\n          \n          // Find appId of this app \n          // - or just hardcode..\n          \n          let appId = 'toolbox';\n          let ok = WINDOW.confirm('Update remote nodes from github?');\n          if(!ok){\n            return false;\n          }\n          \n          let ok2 = WINDOW.confirm('Also update local nodes immediately afterwards?');\n          \n          this.setState({\n            updatingRemote: true\n          });\n          \n          return new Promise(async (resolve, reject)=>{\n            \n            try {\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          {\n                            matchActionType: 'update_app_base:Qmsdfjsl3209',\n                            dataForAction: {\n                              appId,\n                              data: {\n                                appId\n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              // got response from Remote Second after updateRemote\n              console.log('remote Response (update_app_base):', response);\n              \n              let updatedData = response.data.actionResponses[0].data;\n              \n              if(updatedData !== true){\n                WINDOW.alert('Failed updating remote');\n                    \n                this.setState({\n                  updatingRemote: false\n                });\n                \n                return false;\n              }\n              // WINDOW.alert('Updated: ' + updated.length);\n              \n              // // emit event to update locally \n              // try {\n              //   universe.EE.emit('nodes-modified', '');\n              // }catch(err){\n              //   console.error(err);\n              // }\n              \n            }catch(err){\n              \n            }\n              \n            this.setState({\n              updatingRemote: false\n            });\n            \n            if(ok2){\n              this.handleUpdateApp();\n            }\n            \n          });\n            \n            \n        }\n        \n        @autobind\n        makeSaveRequest(nodeToSave, skipEvent){\n          return new Promise(async (resolve, reject) => {\n            \n            this.setState({\n              saving: true\n            })\n            \n            // Make request to save Node on remote \n            try {\n              \n              let ExternalIdentityNodes = await universe.searchMemory({\n                filter: {\n                  sqlFilter: {\n                    type: 'external_identity:0.0.1:local:8982f982j92',\n                    data: {\n                      commonName: 'main'\n                    }\n                  }\n                }\n              });\n              let ExternalIdentityNode = ExternalIdentityNodes[0];\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          {\n                            matchActionType: 'update_node:0.0.1:local:392821982y3',\n                            dataForAction: {\n                              type: 'node:0.0.1:local:123445',\n                              data: nodeToSave\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              console.log('Update response:', response);\n              \n              if(skipEvent !== true){\n                try {\n                  universe.EE.emit('nodes-modified', '');\n                }catch(err){\n                  console.error(err);\n                }\n              }\n              \n              this.setState({\n                saving: false\n              })\n              \n              return resolve({\n                type: 'node:...',\n                data: response.data.actionResponses[0]\n              });\n              \n            } catch(err){\n              console.error('Failed getting local nodes');\n              \n              alert('Failed');\n              \n              this.setState({\n                saving: false\n              })\n              \n            }\n            \n          })\n        }\n      \n        render(){\n          const { component: Component, ...rest } = this.props;\n          // console.log('OwnerSecondExternalIdentityNode',this.props.state.OwnerSecondExternalIdentityNode);\n          \n          let username = '';\n          if(this.props.state.OwnerSecondExternalIdentityNode){\n            if(this.props.state.OwnerSecondExternalIdentityNode.data.identity){\n              switch(this.props.state.OwnerSecondExternalIdentityNode.data.identity.split(':')[0]){\n                case 'id':\n                case 'idtest':\n                  username = this.props.state.OwnerSecondExternalIdentityNode.data.identity.split(':')[1];\n                  break;\n                default:\n                  console.error('unknown identity type');\n                  break;\n              }\n            }\n            if(this.props.state.OwnerSecondExternalIdentityNode.data.InternalUserNode && this.props.state.OwnerSecondExternalIdentityNode.data.InternalUserNode.data.uuid){\n              username = this.props.state.OwnerSecondExternalIdentityNode.data.InternalUserNode.data.uuid;\n            }\n          }\n          \n          const MainDockEditorComponent = this.state.MainDockEditorComponent || ErrorComponent('MainDockEditorComponent');\n        \n          return (\n            <Route {...rest} render={matchProps => (\n                \n              <div className=\"\">\n              \n                <Dock \n                  position={this.props.state.dockPosition || 'right'}\n                  isVisible={this.props.state.dockIsVisible} \n                  onVisibleChange={e=>{\n                    console.log('onVisibleChange');\n                    this.props.setState({dockIsVisible: false})\n                  }}\n                  fluid={true}\n                  defaultSize={0.5}\n                  >\n                  {/*\n                  <div onClick={() => {\n                    this.props.setState({ dockIsVisible: false });\n                  }} style={{cursor:'pointer'}}>X</div>\n                  */}\n                  \n                  {\n                    !this.props.state.dockEditingNode ? '':\n                    <MainDockEditorComponent\n                      node={this.props.state.dockEditingNode}\n                      nodeKey={'dockEditingNode'}\n                    />\n                  }\n                </Dock>\n                \n                  \n                <nav className=\"navbar is-transparent\" style={{zIndex:1}}>\n                  <div className=\"navbar-brand\">\n                    <Link className=\"navbar-item\" to=\"/\">\n                      <h1 className=\"title is-4 truncate\" style={{width:\"350px\"}}>\n                        Toolbox\n                      </h1>\n                    </Link>\n                    <div className=\"navbar-burger burger\" data-target=\"navbarExampleTransparentExample\">\n                      <span></span>\n                      <span></span>\n                      <span></span>\n                    </div>\n                  </div>\n                \n                  <div id=\"navbarExampleTransparentExample\" className=\"navbar-menu\">\n                    <div className=\"navbar-start\">\n                      \n                      \n                      <Link className=\"navbar-item\" to=\"/\">\n                        Timeline\n                      </Link>\n                      \n                      <div className=\"navbar-item dropdown is-hoverable\">\n                        <Link className=\"dropdown-trigger\" to=\"/tools\">\n                          Tools\n                        </Link>\n                        <div className=\"dropdown-menu\">\n                          <div className=\"dropdown-content\">\n                            <Link className=\"dropdown-item\" to=\"/tools\">\n                              Snippets\n                            </Link>\n                            <Link className=\"dropdown-item\" to=\"/metadatas\">\n                              Metadata\n                            </Link>\n                            <Link className=\"dropdown-item\" to=\"/identity\">\n                              View Identity\n                            </Link>\n                            <Link className=\"dropdown-item\" to=\"/sites\">\n                              Sites\n                            </Link>\n                            <Link className=\"dropdown-item\" to=\"/tasks\">\n                              Tasks\n                            </Link>\n                            <Link className=\"dropdown-item\" to=\"/webhooks\">\n                              Webhooks\n                            </Link>\n                            <Link className=\"dropdown-item\" to=\"/actions\">\n                              Actions\n                            </Link>\n                            <Link className=\"dropdown-item\" to=\"/situations\">\n                              Situations\n                            </Link>\n                            <Link className=\"dropdown-item\" to=\"/ipfs\">\n                              IPFS\n                            </Link>\n                            \n                          </div>\n                        </div>\n                      </div>\n                      \n                      <Link className=\"navbar-item\" to=\"/sharing\">\n                        Shared Data\n                      </Link>\n                      \n                      <div className=\"navbar-item dropdown is-hoverable\">\n                        <Link className=\"dropdown-trigger\" to=\"/connections\">\n                          Connections\n                        </Link>\n                        <div className=\"dropdown-menu\">\n                          <div className=\"dropdown-content\">\n                            \n                            <Link className=\"dropdown-item\" to=\"/connections\">\n                              Connections\n                            </Link>\n                            \n                            <Link className=\"dropdown-item\" to=\"/groups\">\n                              Groups\n                            </Link>\n                            \n                            <Link className=\"dropdown-item\" to=\"/devices\">\n                              Devices\n                            </Link>\n                            \n                          </div>\n                        </div>\n                      </div>\n                        \n                      \n                    </div>\n                    <div className=\"navbar-end\">\n                    \n                      <div className=\"navbar-item dropdown is-hoverable is-right\">\n                        <div className=\"dropdown-trigger\">\n                                                  \n                          <button className={\"button is-small\" + ((this.props.state.updatingLocal || this.props.state.updatingRemote) ? ' is-loading':'')}>\n                            <span>\n                            \n                              {\n                                !username ? 'Loading User':\n                                <span>\n                                  {username}\n                                </span>\n                              }\n                              \n                            </span>\n                            <span className=\"icon is-small\">\n                              <i className=\"fa fa-angle-down\"></i>\n                            </span>\n                          </button>\n                        </div>\n                        <div className=\"dropdown-menu\" style={{top:\"0px\"}}>\n                          <div className=\"dropdown-content\">\n                            \n                            <Link className=\"dropdown-item\" to='/settings'>\n                              Settings\n                            </Link>\n                            \n                            <div className='dropdown-divider'></div>\n                            \n                            <a className=\"dropdown-item\" onClick={this.handleUpdateApp}>\n                              Local App from Second\n                            </a>\n                            <a className=\"dropdown-item\" onClick={this.handleUpdateRemote}>\n                              Remote from GH, then Local\n                            </a>\n                            \n                          </div>\n                        </div>\n                      </div>\n                        \n                    </div>\n                  </div>\n                  \n                </nav>\n                \n                <Component {...matchProps} />\n                \n                {/*\n                <ReactResizeDetector handleWidth handleHeight onResize={(w,h)=>this.props.setState({newWindowSize:[w,h]})} />\n                */}\n                \n              </div>\n              \n            )} />\n          )\n        }\n      };\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      \n      mycomponent = universe.sharedComponents.withEditableNodeInfo(mycomponent, {\n        localNode: SELF\n      });\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "DefaultLayout",
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----"
  }
}