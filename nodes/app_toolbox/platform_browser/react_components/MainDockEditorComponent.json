{
  "type": "react_component:0.0.1:local:98912hd89",
  "name": "MainDockEditorComponent",
  "data": {
    "version": "16",
    "code": "(()=>{\n  \n  \n  let __parsedFiles = {};\n  function jsonParse(key, contents){\n    if(__parsedFiles[key]){\n      return __parsedFiles[key]\n    }\n  \n    __parsedFiles[key] = JSON.parse(contents);\n    return __parsedFiles[key];\n  \n  }\n  \n  \n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            mainTab: '__ALL__',\n            aceHeight: 100,\n            windowHeight: 100,\n            pastable: false,\n            pasteText: '',\n            isPublishing: false,\n            saving: false,\n            updatingGit: false,\n            chainNodes: [],\n            nodeChains: null\n          }\n        }\n        \n        componentDidMount(){\n          console.log('MainDockEditorComponent componentDidMount');\n          this.resizeAce();\n          this.handleKeyDown();\n          \n          this.loadSchema();\n          \n          universe.EE.on('nodes-modified', this.loadSchema);\n          \n        }\n        \n        componentWillUnmount(){\n          \n          universe.EE.removeListener('nodes-modified', this.fetchParentsOfNodesToLearn);\n          universe.EE.removeListener('nodes-modified', this.loadSchema);\n          universe.EE.removeListener('nodes-modified', this.checkForCodeUpdates);\n          \n        }\n        \n        componentWillReceiveProps(nextProps, nextState){\n          \n          // resizing helpers for Ace height\n          if(!nextProps.state.newWindowSize || \n            this.state.windowHeight != nextProps.state.newWindowSize[1]){\n            this.setState({\n              aceHeight: 0\n            },()=>{\n              this.resizeAce();\n            })\n          }\n          if(nextState.aceHeight == -1){\n            this.setState({\n              aceHeight: 0\n            },()=>{\n              this.resizeAce();\n            })\n          }\n          // if(nextProps.state.editingNode && this.props.node){\n          //   if(nextProps.state.editingNode._id != this.props.node._id){\n          //     this.setState({\n          //       mainTab: '__ALL__'\n          //     })\n          //   }\n          // }\n          // console.log('nextProps:', nextProps);\n        }\n        \n        @autobind\n        resizeAce(){\n          if(!this.parentRef){\n            this.setState({\n              aceHeight: null\n            })\n            return;\n          }\n          // console.log('Resize ace', this.parentRef.offsetHeight);\n          this.setState({\n            aceHeight: this.parentRef.offsetHeight\n          },()=>{\n            if(this.aceRef){\n              this.aceRef.editor.resize();\n            }\n          })\n        }\n        \n        @autobind\n        refetchNode(){\n          return new Promise(async (resolve,reject)=>{\n            \n            let node = this.props.node;\n              \n            try {\n              \n              this.setState({\n                fetchingRemote: true\n              })\n              \n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          {\n                            matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                            dataForAction: {\n                              type: 'string:...',\n                              data: this.props.state.OwnerSecondExternalIdentityNode.data.token\n                            }\n                          },\n                          {\n                            matchActionType: 'search_internal_datasource:0.0.1:local:2h3ufih8s9h2f',\n                            dataForAction: {\n                              type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                              data: {\n                                dataFilter: {\n                                  _id: node._id\n                                },\n                                matchFunctionNode: {\n                                  // query here!\n                                  // action_pointer:0.0.1:local:238972ncr\n                                  type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n                                  data: {\n                                    code: `(()=>{\n                                      // Action \n                                      // - childNode common_type:0.0.1:local:298fh29h2323f == \"action\" \n                                      \n                                      let inputNode = INPUT.data.inputNode;\n                                      \n                                      if(inputNode._id != '${node._id}'){\n                                        return false;\n                                      }\n                                      \n                                      return inputNode;\n                                      \n                                    })()`\n                                  }\n                                },\n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              let nodes = response.data.actionResponses[1].data;\n              \n              // expecting single result \n              // let componentNode = await universe.runInVM(result[0],{});\n              \n              // this resets the component! (remount, etc.) \n              this.props.setState({\n                dockEditingNode: nodes[0]\n              })\n              \n              resolve();\n              \n              \n            } catch(err){\n              console.error('Failed refetching editingNode');\n              \n              this.setState({\n                fetchingRemote: false\n              })\n              \n              reject();\n              \n            }\n            \n          });\n          \n          // this.props.setState({\n          //   editingNode: node\n          // })\n          \n        }\n        \n        @autobind\n        switchToEditingLocalNode(localNode){\n          // same as if initated using event (second-elem bookmarketlet, in withEditableNodeInfo HOC, in MainComponent) \n        \n          return new Promise(async(resolve,reject)=>{\n            \n            console.log('switchToEditingLocalNode', localNode);\n              \n            // requires ReactGlobalState HOC on component! \n            // console.log('Editing2', this.state.editNodeId, this.props.state);\n            \n            function getNodePath(node, chain){\n              chain = chain || [];\n              chain.push(node.name);\n              if(node.parent){\n                chain = getNodePath(node.parent, chain);\n              }\n              return chain;\n            }\n            \n            let nodePath = getNodePath(localNode).reverse();\n            \n            console.log('NODE PATH:', nodePath);\n            \n            \n            // Fetch the node from remote\n            // - TODO: allow for edit-inline? \n            \n            this.props.setState({\n              dockEditingLocalNode: null,\n              dockEditingNode: null,\n              dockEditingNodePath: null,\n              dockEditingNodeId: null\n            });\n            \n            let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n              type: 'standard_capability_action:0.0.1:local:298j291bs',\n              data: {\n                action: 'send',\n                options: {\n                  ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                  RequestNode: {\n                    type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                    data: {\n                      actions: [\n                        {\n                          matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                          dataForAction: {\n                            type: 'string:...',\n                            data: this.props.state.OwnerSecondExternalIdentityNode.data.token\n                          }\n                        },\n                        {\n                          matchActionType: 'search_internal_datasource:0.0.1:local:2h3ufih8s9h2f',\n                          dataForAction: {\n                            type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                            data: {\n                              dataFilter: {\n                                // _id: this.state.editNodeId,\n                                _path: nodePath.join('/')\n                                // _root: {\n                                //   name: '',\n                                // },\n                                // '_root.nodes' : {\n                                //   $elemMatch: {\n                                //     name: '',\n                                    \n                                //   }\n                                // }\n                              }\n                            }\n                          }\n                        }\n                      ]\n                      \n                    }\n                  }\n                }\n              }\n            });\n            \n            let nodes = response.data.actionResponses[1].data;\n            \n            if(nodes.length != 1){\n              console.log('Nodes (expected 1):', nodes);\n              WINDOW.alert('Unable to load Node for editing2');\n              return false;\n            }\n            \n            let node = nodes[0];\n            \n            console.log('NODE RESPONSE (for editing):', node);\n            \n            this.props.setState({\n              // dockIsVisible: true,\n              dockEditingNode: node,\n              dockEditingLocalNode: localNode\n              // dockEditingNodePath: this.state.editNodePath,\n              // dockEditingNodeId: this.state.editNodeId\n            })\n            \n            \n          });\n        }\n      \n        @autobind\n        async loadSchema(){\n          // from NodeChain \n          // - temporarily using an odd slug (without ipfs hash) \n          \n          // let slug = this.props.node.type;\n          let slug = this.props.editStateToObj().type;\n          \n          console.log('LOAD SCHEMA1');\n          let schemaObj;\n            \n          let parsed = slug.split(':');\n          if(parsed[1].slice(0,2) == 'Qm'){\n            console.log('IPFS Hash:', parsed[1]);\n            \n            let fileNode = await universe.ipfs.files.cat(parsed[1]);\n            console.log('fileNode:', fileNode);\n            fileNode = JSON.parse(fileNode);\n            schemaObj = fileNode.data.schema;\n            \n            // choose default tab if exists\n            let mainTab = this.state.mainTab;\n            try {\n              if(schemaObj.properties.code){\n                mainTab = 'code';\n              }\n            }catch(err){}\n            \n            this.setState({\n              schema: schemaObj, // jsSchema\n              mainTab\n            })\n            \n          } else {\n            \n            console.log('using \"any\" schema');\n            \n            // use an \"any\" schema object\n            schemaObj = {\n              type: 'object'\n            };\n            try {\n              if(this.props.editStateToObj().data.code){\n                mainTab = 'code';\n              }\n            }catch(err){\n              console.error('get code prop error:', err);\n            }\n            \n            this.setState({\n              schema: schemaObj, // jsSchema\n              mainTab\n            })\n            \n          }\n          \n        }\n      \n        @autobind\n        async saveDataUpdates(){\n        \n          console.log('Saving updates');\n      \n          let dataBeforeParse = this.props.editState.fields.data.value;\n      \n          let realData;\n    \n          try {\n            realData = JSON.parse(dataBeforeParse);\n          }catch(err){\n            return false;\n          }\n      \n          // update it on the server \n          let nodeToSave = {\n            _id: this.props.node._id,\n            data: realData, // type should be correct! ,\n            updatedAt: (new Date()).getTime()\n            // schemaObj: JSON.parse(outputVal)\n          }\n          \n          this.makeSaveRequest(nodeToSave);\n          \n          \n          // update/reload locally\n          this.saveLocalDataUpdates();\n          \n        }\n      \n        @autobind\n        async saveLocalDataUpdates(){\n        \n          console.log('Saving LOCAL updates');\n      \n          let dataBeforeParse = this.props.editState.fields.data.value;\n      \n          let realData;\n    \n          try {\n            realData = JSON.parse(dataBeforeParse);\n          }catch(err){\n            return false;\n          }\n      \n          // update locally\n          console.log('local dockEditingLocalNode:', this.props.state.dockEditingLocalNode);\n          \n          let updateNode = this.props.state.dockEditingLocalNode;\n          updateNode.data = realData;\n          \n          let updatedLocally = await universe.updateNode(updateNode);\n          \n          \n          // refresh locally!\n          let componentInternalId = realData.internalId;\n          universe.EE.emit('local-react-node-modified:' + componentInternalId, true);\n          console.log('Emitted local-react-node-modified:', componentInternalId);\n          \n        }\n      \n        @autobind\n        handleExportNode(){\n      \n          return new Promise(async (resolve,reject)=>{\n      \n            let node = JSON.parse(JSON.stringify(this.props.editStateToObj()));\n            // let node = JSON.parse(JSON.stringify(this.props.node));\n      \n            let confirm;\n            confirm = WINDOW.confirm('Export as JSON (copied to clipboard)?');\n            if(!confirm){\n              return false;\n            }\n            \n            // JSON-ify, export to be imported into browser/etc.\n            // - for the \"learn basics\" Nodes (default ExternalIdentity, capabilities, etc.) \n            let j = JSON.stringify(node);\n            WINDOW.tmpJ = j;\n            // console.log('JSON-ified:', j);\n            // WINDOW.prompt('JSON',WINDOW.btoa(j));\n            universe.copy(j);\n            \n          });\n      \n        }\n      \n        @autobind\n        handleDelete(){\n      \n          return new Promise(async (resolve,reject)=>{\n      \n            let node = JSON.parse(JSON.stringify(this.props.node));\n      \n            // Create this new one, then iterate down the tree of kids \n            // - if this one has a nodeId, ask if we want to keep it? \n            let confirmed = WINDOW.prompt('Delete for sure?','y');\n            if(confirmed != 'y'){\n              return false;\n            }\n      \n            this.setState({\n              saving: true\n            });\n            \n            node.active = false;\n            let deleted = await this.makeSaveRequest({\n              _id: node._id,\n              active: false\n            }, {\n              skipWaitForResolution: true, \n              skipRebuild: true\n            }, true);\n            \n            const deleteChildNodes = (childNodes) => {\n              return new Promise(async (resolve, reject)=>{\n                \n                for(let tmpNode of childNodes){\n      \n                  // let deletedChildNode = await this.makeDelete(tmpNode);\n                  tmpNode.active = false;\n                  let deletedChildNode = await this.makeSaveRequest({\n                    _id: tmpNode._id,\n                    active: false\n                  }, {\n                    skipWaitForResolution: true, \n                    skipRebuild: true\n                  }, true);\n      \n                  if(tmpNode.nodes && tmpNode.nodes.length){\n                    await deleteChildNodes(tmpNode.nodes);\n                  }\n                }\n                resolve();\n      \n              });\n            }\n      \n            if(node.nodes){\n              await deleteChildNodes(node.nodes);\n            }\n      \n            console.log('rebuilding memory on remote, after bulk updates');\n            await this.makeRebuildMemoryRequest();\n            \n            this.setState({\n              saving: false\n            });\n        \n            console.log('Done Deleting (and children)');\n          \n            try {\n              universe.EE.emit('nodes-modified', '');\n            }catch(err){\n              console.error(err);\n            }\n            \n            this.props.setState({\n              editingNode: null\n            })\n            // window.location = '/node';\n      \n          });\n      \n        }\n        \n        @autobind\n        makeSaveRequest(nodeToSave, opts, skipEvent){\n          return new Promise(async (resolve, reject) => {\n            \n            this.setState({\n              saving: true\n            })\n            \n            opts = opts || {};\n            \n            // Make request to save Node on remote \n            try {\n              \n              // let ExternalIdentityNodes = await universe.searchMemory({\n              //   filter: {\n              //     sqlFilter: {\n              //       type: 'external_identity:0.0.1:local:8982f982j92',\n              //       data: {\n              //         commonName: 'main'\n              //       }\n              //     }\n              //   }\n              // });\n              // let ExternalIdentityNode = ExternalIdentityNodes[0];\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          {\n                            matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                            dataForAction: {\n                              type: 'string:...',\n                              data: this.props.state.OwnerSecondExternalIdentityNode.data.token\n                            }\n                          },\n                          {\n                            matchActionType: 'update_node:0.0.2:local:392821982y3',\n                            dataForAction: {\n                              type: 'update_node_data:0.0.2:local:123445',\n                              data: {\n                                optionsNode: {\n                                  type: 'options_generic:0.0.1:local:289f3j29832',\n                                  data: opts || {}\n                                },\n                                dataNode: nodeToSave\n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              console.log('Update response:', response);\n              \n              if(skipEvent !== true){\n                try {\n                  universe.EE.emit('nodes-modified', '');\n                }catch(err){\n                  console.error(err);\n                }\n              }\n              \n              this.setState({\n                saving: false\n              })\n              \n              return resolve({\n                type: 'node:...',\n                data: response.data.actionResponses[1]\n              });\n              \n            } catch(err){\n              console.error('Failed getting local nodes');\n              \n              alert('Failed');\n              \n              this.setState({\n                saving: false\n              })\n              \n              return reject();\n              \n            }\n            \n          })\n        }\n        \n        @autobind\n        makeRebuildMemoryRequest(){\n          return new Promise(async (resolve, reject) => {\n            \n            try {\n              \n              // let ExternalIdentityNodes = await universe.searchMemory({\n              //   filter: {\n              //     sqlFilter: {\n              //       type: 'external_identity:0.0.1:local:8982f982j92',\n              //       data: {\n              //         commonName: 'main'\n              //       }\n              //     }\n              //   }\n              // });\n              // let ExternalIdentityNode = ExternalIdentityNodes[0];\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          {\n                            matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                            dataForAction: {\n                              type: 'string:...',\n                              data: this.props.state.OwnerSecondExternalIdentityNode.data.token\n                            }\n                          },\n                          {\n                            matchActionType: 'rebuild_memory:Qmdsf892hf98h23',\n                            dataForAction: {\n                              type: 'rebuild_memory:0.0.2:local:123445',\n                              data: {\n                                skipWaitForResolution: false\n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              \n              return resolve({\n                type: 'boolean:...',\n                data: true\n              });\n              \n            } catch(err){\n              console.error('Failed rebuildMemory');\n              \n              alert('Failed rebuildMemory');\n              \n              return reject();\n              \n            }\n            \n          })\n        }\n      \n        @autobind\n        handleKeyDown(e){\n          if(this.aceRef && this.aceRef.editor){\n            this.aceRef.editor.commands.addCommand({\n              name: 'save',\n              bindKey: {\n                win: 'Ctrl-S',\n                mac: 'Command-S'\n              },\n              exec: (env, args, request)=>{\n                this.saveDataUpdates();\n              }\n            });\n            \n            // overwrite Cmd-D to same as sublime \n            this.aceRef.editor.commands.addCommand({\n              name: 'selectMoreAfter2',\n              bindKey: {\n                win: 'Ctrl-D',\n                mac: 'Command-D'\n              },\n              exec: (env, args, request)=>{\n                // selectMoreAfter\n                // console.log('selectMoreAfter!');\n                this.aceRef.editor.execCommand(\"selectMoreAfter\")\n              }\n            });\n          }\n      \n        }\n        \n        @autobind\n        handleChangeMainTab(tabName){\n          \n          // using \"__ALL__\" as the \"main\" holder\n          // - otherwise assume we are editing a field \n          \n          this.setState({\n            mainTab: tabName,\n            aceHeight: 0\n          },()=>{\n            this.resizeAce();\n          })\n        }\n        \n        @autobind\n        async loadHashData(hash){\n            \n          // this.setState({\n          //   fetchingIpfs: true,\n          //   ipfsData: null\n          // });\n          // let hash = this.state.hash;\n          \n          console.log('Fetching ipfs hash:', hash);\n          \n          try {\n            let data = await universe.ipfs.files.cat(hash);\n            \n            data = JSON.stringify(JSON.parse(data),null,2);\n            \n            console.log('ipfs Data:', data);\n            \n            WINDOW.alert(`${data}`);\n            \n            \n          } catch(err){\n            WINDOW.alert('Failed fetching ipfs Hash');\n          }\n          \n          \n        }\n        \n        @autobind\n        toggleDockPosition(){\n          console.log('toggleDockPosition', this.props.state.dockPosition);\n          let dockPosition = 'left';\n          if(this.props.state.dockPosition == 'left'){\n            dockPosition = 'right';\n          }\n          \n          this.props.setState({\n            dockPosition\n          });\n        }\n        \n        render(){\n          \n          // add \"fields\" to mainTab for the selected Node \n          // - also should show \"unused\" fields from schema? \n          \n          // let node = this.props.node;\n          let node = this.props.editStateToObj();\n      \n          let { value, parentValue } = this.props.editState.fields.data; // value is always a String!!!! (might not be Parseable tho!) \n    \n          let mainTabs = [\n            ['__ALL__','All']\n          ]\n      \n          let dataBeforeParse = value;\n          let isValidJSON = true;\n          let parsedData;\n          try {\n            parsedData = JSON.parse(dataBeforeParse);\n          }catch(err){\n            isValidJSON = false;\n          }\n      \n      \n          // validates?\n          let data = value;\n          let isValidDataForSchema = false;\n          let schemaValidationErrors = '';\n      \n      \n          if(this.state.schema){\n      \n            if(this.state.schema.type == 'object'){\n      \n              if(typeof data == 'string'){\n                try {\n                  data = JSON.parse(data);\n                }catch(err){\n                  // return false;\n                  data = null;\n                }\n              } else {\n                // leave as-is (assume String/Number) \n              }\n      \n            } else {\n              // use raw value\n              // data = dataBeforeParse;\n            }\n      \n            try {\n              let validate = universe.jsSchema.fromJSON(this.state.schema);\n              let validates = validate(data);\n              // console.log('validates:', validates);\n              if(validates){ \n                isValidDataForSchema = true;\n              } else {\n                schemaValidationErrors = validate.errors(data);\n              }\n              // console.log('schemaValidationErrors',schemaValidationErrors);\n            }catch(err){\n              console.error('jsSchema err:', err);\n            }\n            \n            // tabs\n            if(this.state.schema.type == 'object'\n              && isValidJSON){\n              try {\n                let objTabs = Object.keys(parsedData).map(d=>{return [d,d]});\n                mainTabs = mainTabs.concat(objTabs);\n              }catch(err){\n                \n              }\n            }\n            \n          }\n          \n          let outputVal;\n          if(this.state.mainTab != '__ALL__'){\n            // this.props.editState.fields.data.value ? this.props.editState.fields.data.value.code:''\n            try {\n              // console.log('dATAVAL',this.props.editState.fields.data.value);\n              value = JSON.parse(this.props.editState.fields.data.value)[this.state.mainTab];\n            }catch(err){\n              console.error('failed parsing value for field.', err);\n            }\n          }\n          \n          let showEditor = true,\n            showJSONRepresentation = false;\n          if(universe.lodash.isString(value)){\n            // default, expecting an editable string \n          } else {\n            showEditor = false;\n            showJSONRepresentation = true;\n          }\n          \n          // get path to node (by name) \n          let nodePaths = [];\n          function addParent(node){\n            nodePaths.push(node.name);\n            if(node.parent){\n              addParent(node.parent);\n            }\n          }\n          addParent(node);\n          \n          nodePaths = nodePaths.reverse();\n          \n          return (\n            <div className=\"fill-height-or-more\">\n              <div style={{flex:'0 1 auto'}}>\n                <div style={{padding: '4px'}}>\n                  <div className=\"level-NOTANYMORE\">\n                    <div className=\"level-right-NOTANYMORE is-pulled-right\">\n                      <div className=\"level-item-NOTANYMORE\">\n                        <div className=\"field is-grouped\">\n                        \n                          <div className=\"control dropdown is-right is-hoverable\">\n                            <div className=\"dropdown-trigger\">\n                                                      \n                              <button className={\"button is-small is-danger\"}>\n                                <span>Delete</span>\n                                <span className=\"icon is-small\">\n                                  <i className=\"fa fa-angle-down\"></i>\n                                </span>\n                              </button>\n                            </div>\n                            <div className=\"dropdown-menu\">\n                              <div className=\"dropdown-content\">\n                              \n                                <a className=\"dropdown-item is-danger\" onClick={this.handleDelete}>\n                                  This Node\n                                </a>\n                                \n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        \n                      </div>\n                    </div>\n                    <div className=\"level-left-NOTANYMORE\">\n                      <div className=\"level-item-NOTANYMORE\">\n                        <h3 className=\"title is-5\">\n                          <span className='icon' onClick={this.toggleDockPosition}><i className='fa fa-exchange-alt'></i></span>\n                          {\n                            nodePaths.map(path=>(\n                              <span> / {path}</span>\n                            ))\n                          }\n                        </h3>\n                        <h3 className=\"subtitle is-6\">\n                          {node._id} - {node.type}\n                        </h3>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div style={{flex:'0 1 auto'}}>\n                <div style={{padding: '4px'}}>\n                  <div className=\"level\">\n                    <div className=\"level-left\">\n                      <div className=\"level-item\">\n                        <div className=\"field is-grouped\">\n                          \n                          <p className=\"control\">\n                            <a className=\"button is-info is-small\" onClick={this.saveLocalDataUpdates}>\n                              Save &amp; Refresh Local\n                            </a>\n                          </p>\n                          \n                          <p className=\"control\">\n                            <a className=\"button is-success is-small\" onClick={this.saveDataUpdates}>\n                              Save Local and Remote \n                            </a>\n                          </p>\n                          \n                          <p className=\"control\">\n                            <a className=\"button is-default is-small\" onClick={this.handleExportNode}>\n                              Export Node to Clipboard\n                            </a>\n                          </p>\n                          \n                          <div className=\"control dropdown is-right is-hoverable\">\n                            <div className=\"dropdown-trigger\">\n                                                      \n                              <button className={\"button is-small\"}>\n                                <span>Switch Editing Node</span>\n                                <span className=\"icon is-small\">\n                                  <i className=\"fa fa-angle-down\"></i>\n                                </span>\n                              </button>\n                            </div>\n                            <div className=\"dropdown-menu\">\n                              <div className=\"dropdown-content\">\n                                \n                                {\n                                  (this.props.state.editableNodesArr || []).map(tmpNode=>(\n                                    <a className=\"dropdown-item is-danger\" onClick={e=>this.switchToEditingLocalNode(tmpNode)}>\n                                      {tmpNode.name}\n                                    </a>\n                                  ))\n                                }\n                                \n                              </div>\n                            </div>\n                          </div>\n                          \n                          {\n                            !this.state.saving ? '':\n                            <p className=\"control\">\n                              <a className={\"button is-small is-white is-loading\"}>\n                                &nbsp;\n                              </a>\n                              <a className={\"button is-small is-white\"}>\n                                Saving...\n                              </a>\n                            </p>\n                          }\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div style={{flex:'0 1 auto'}}>\n                <div className=\"tabs\">\n                  <ul>\n                    {\n                      mainTabs.map(tab=>(\n                        <li \n                          key={tab[0]}\n                          className={this.state.mainTab == tab[0] ? \"is-active\":''}\n                          onClick={e=>this.handleChangeMainTab(tab[0])}\n                        ><a>{tab[1]}</a></li>\n                      ))\n                    }\n                  </ul>\n                </div>\n              </div>\n              \n              <div \n                className=\"\" \n                style={{flex:'1 1 auto'}}\n                ref={r=>this.parentRef=r}\n                >\n                <div \n                  style={{height: this.state.aceHeight+'px', position: 'relative'}} \n                  >\n                  \n                  {\n                    !showEditor ? '':\n                    <AceEditor\n                      ref={r=>this.aceRef=r}\n                      mode=\"jsx\"\n                      theme=\"monokai\"\n                      value={value}\n                      onChange={v=>{\n                        if(this.state.mainTab == '__ALL__'){\n                          // if(this.state.schema.type == 'object'){\n                          //   this.props.setEditState('data', v)\n                          // } else {\n                          //   // raw\n                            this.props.setEditState('data', v)\n                          // }\n                        } else {\n                          let newObj = {};\n                          newObj[this.state.mainTab] = v;\n                          // console.log('onchangedata:', data, this.props.editState.fields.data);\n                          let newData = Object.assign({},data,newObj)\n                          this.props.setEditState('data', JSON.stringify(newData));\n                        }\n                      }}\n                      name=\"UNIQUE_ID_OF_DIV2\"\n                      editorProps={{$blockScrolling: true}}\n                      width=\"100%\"\n                      height=\"100%\"\n                      onLoad={editor=>{\n                        editor.getSession().setUseWrapMode(true);\n                      }}\n                      setOptions={{\n                        enableBasicAutocompletion: true,\n                        enableLiveAutocompletion: true,\n                        showPrintMargin: false,\n                        enableSnippets: true,\n                        behavioursEnabled: false,\n                        showLineNumbers: true,\n                        tabSize: 2\n                      }}\n                    />\n                  }\n                  \n                  {\n                    !showJSONRepresentation ? '':\n                    <pre><code>{JSON.stringify(value,null,2)}</code></pre>\n                  }\n                  \n                </div>\n              </div>\n            </div>\n          )\n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      \n      mycomponent = universe.withEditManager(mycomponent,{\n        editProp: 'node',\n        fields: ['type','data'],\n        fieldConvertServerOnceFunc: {\n          data: v=>{\n            return JSON.stringify(v,null,2)\n          }\n        },\n        fieldOutputFunc: {\n          data: v=>{\n            return JSON.parse(v)\n          }\n        },\n        fieldConvertServerFunc: {\n          // tmpData: v=>{\n          //   if(v){\n      \n          //   }\n          //   return v;\n          // }\n          // data: v=>{\n          //   // jsSchema\n          //   // console.log('NewServerData:', v);\n          //   if(v instanceof String){\n          //     return v;\n          //   }\n          //   return JSON.stringify(v);\n          //   // return JSON.stringify({\n          //   //   data: v // necessary to do this to retain correct types? \n          //   // },null,2)\n          // }\n        },\n        fieldCompareFunc: {\n          // uri: (prev, next)=>{\n          //   console.log('URI compare!:', prev, next);\n          //   return prev === next;\n          // }\n        }\n      });\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n\n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n  \n})()",
    "note": "user_editor",
    "internalId": "MainDockEditorComponent",
    "key": "4f9dd65a-cceb-4dc8-a61a-c9f53c4dfd09",
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----"
  }
}