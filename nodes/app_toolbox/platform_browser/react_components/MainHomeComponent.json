{
  "type": "react_component:0.0.1:local:98912hd89",
  "name": "MainHomeComponent",
  "data": {
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----",
    "version": "1",
    "key": "1424caa3-2102-49dc-abf6-6aef966076f2",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      class EmbeddedComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              embeddedComponenthere\n            </div>\n          )\n        }\n      }\n      \n      let ErrorComponent = (name) => {\n        return class ErrorComponent extends React.Component {\n          constructor(props){\n            super(props);\n            this.state = {}\n          }\n          \n          render(){\n            return (\n              <div>\n                ErrorLoading: {name || 'unknown'}\n              </div>\n            )\n          }\n        }\n      }\n    \n      class OutputErrorCatcherComponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {}\n        }\n        \n        componentDidCatch(error, info) {\n          // Display fallback UI\n          this.setState({ hasError: true });\n          // You can also log the error to an error reporting service\n          console.error('MainHomeComponent OutputErrorCatcherComponent componentDidCatch:', error, info);\n        }\n        \n        render(){\n          if(this.state.hasError){\n            return (\n            <div>\n              OutputErrorCatcher\n              <br />\n              <pre><code>[TODO, error output]</code></pre>\n            </div>\n            )\n          }\n          \n          // normal\n          return this.props.children;\n        }\n      }\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          \n          let searchIdentity;\n          try {\n            searchIdentity = props.state.OwnerSecondExternalIdentityNode.data.identity;\n          }catch(err){\n            console.error('Missing props.state.OwnerSecondExternalIdentityNode.data.identity', err);\n          }\n          \n          this.state = {\n            SharedDataNodes: [],\n            selectedCodePackageNode: null, // when selected\n            groups: [], \n            allExternalConnections: [], \n            searchIdentity,\n            filterText: '',\n            postText: '',\n            postGroupNodeId: '', \n            isPosting: false,\n            tabsCodePackageMainSelected: 'details'\n          }\n        }\n        \n        componentDidMount(){\n          \n          console.log('Loaded MainPostsComponent');\n            \n          this.startup();\n            \n        }\n        \n        @autobind\n        async startup(){\n          // this.fetchGroups();\n          // this.fetchExternalConnections();\n          \n          // this.fetchFromRemoteForIdentity(this.props);\n          this.fetchGroups();\n          this.fetchExternalConnections();\n          this.fetchMine();\n          \n        }\n        \n        @autobind\n        fetchGroups(){\n          \n          return new Promise(async (resolve,reject)=>{\n            \n            this.setState({\n              fetchingGroups: true\n            });\n            \n            let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n              type: 'standard_capability_action:0.0.1:local:298j291bs',\n              data: {\n                action: 'send',\n                options: {\n                  ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                  RequestNode: {\n                    type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                    data: {\n                      actions: [\n                        {\n                          matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                          dataForAction: {\n                            type: 'string:...',\n                            data: this.props.state.OwnerSecondExternalIdentityNode.data.token\n                          }\n                        },\n                        {\n                          matchActionType: 'search_internal_datasource:0.0.1:local:2h3ufih8s9h2f',\n                          dataForAction: {\n                            type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                            data: {\n                              matchFunctionNode: {\n                                // query here!\n                                // action_pointer:0.0.1:local:238972ncr\n                                type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n                                data: {\n                                  code: `(()=>{\n                                    // Action \n                                    // - childNode common_type:0.0.1:local:298fh29h2323f == \"action\" \n                                    \n                                    let inputNode = INPUT.data.inputNode;\n                                    \n                                    if(inputNode.nodeId){\n                                      return false;\n                                    }\n                                    \n                                    if(inputNode.type.split(':')[0] != 'group_for_sharing'){\n                                      return false;\n                                    }\n                                    \n                                    return inputNode;\n                                    \n                                  })()`\n                                }\n                              },\n                              // expected/allowed schemas for return \n                              // outputSchemas: [\n                              //   'query_result:0.0.1:local:32490usfj23o23f',\n                              //   'internal_error_output:0.0.1:local:32948x2u3cno2c'\n                              // ]\n                            }\n                          }\n                        }\n                      ]\n                      \n                    }\n                  }\n                }\n              }\n            });\n            \n            // let nodes = universe.lodash.find(response.data.actionResponses[0].data[0].nodes,{type: 'code:0.0.1:local:32498h32f2'});\n            let nodes = response.data.actionResponses[1].data;\n            \n            let postGroupNodeId = this.state.postGroupNodeId;\n            if(!postGroupNodeId){\n              postGroupNodeId = nodes.find(node=>{\n                return node.data.name == 'Private';\n              });\n              if(postGroupNodeId){\n                postGroupNodeId = postGroupNodeId._id;\n              }\n            }\n            \n            this.setState({\n              groups: nodes,\n              postGroupNodeId,\n              fetchingGroups: false\n            }, resolve);\n            \n          });\n          \n        }\n        \n        @autobind\n        fetchExternalConnections(){\n          \n          return new Promise(async (resolve,reject)=>{\n            \n            this.setState({\n              fetchingConnections: true\n            });\n            \n            let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n              type: 'standard_capability_action:0.0.1:local:298j291bs',\n              data: {\n                action: 'send',\n                options: {\n                  ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                  RequestNode: {\n                    type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                    data: {\n                      actions: [\n                        {\n                          matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                          dataForAction: {\n                            type: 'string:...',\n                            data: this.props.state.OwnerSecondExternalIdentityNode.data.token\n                          }\n                        },\n                        {\n                          matchActionType: 'search_internal_datasource:0.0.1:local:2h3ufih8s9h2f',\n                          dataForAction: {\n                            type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                            data: {\n                              matchFunctionNode: {\n                                // query here!\n                                // action_pointer:0.0.1:local:238972ncr\n                                type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n                                data: {\n                                  code: `(()=>{\n                                    // Action \n                                    // - childNode common_type:0.0.1:local:298fh29h2323f == \"action\" \n                                    \n                                    let inputNode = INPUT.data.inputNode;\n                                    \n                                    if(inputNode.nodeId){\n                                      return false;\n                                    }\n                                    \n                                    if(inputNode.type.split(':')[0] != 'external_identity'){\n                                      return false;\n                                    }\n                                    \n                                    return inputNode;\n                                    \n                                  })()`\n                                }\n                              },\n                              // expected/allowed schemas for return \n                              // outputSchemas: [\n                              //   'query_result:0.0.1:local:32490usfj23o23f',\n                              //   'internal_error_output:0.0.1:local:32948x2u3cno2c'\n                              // ]\n                            }\n                          }\n                        }\n                      ]\n                      \n                    }\n                  }\n                }\n              }\n            });\n            \n            // let nodes = universe.lodash.find(response.data.actionResponses[0].data[0].nodes,{type: 'code:0.0.1:local:32498h32f2'});\n            console.log('fetchExternalConnections Response:', response);\n            \n            let nodes = response.data.actionResponses[1].data;\n            \n            this.setState({\n              allExternalConnections: nodes,\n              fetchingConnections: false\n            }, this.updateConnectionGroups);\n            \n            resolve(nodes);\n            \n            \n          });\n          \n        }\n        \n        @autobind\n        fetchSelected(){\n          // fetch Mine or Remote depending on selected from select \n          \n          if(this.props.state.OwnerSecondExternalIdentityNode.data.identity == this.state.searchIdentity){\n            this.fetchMine();\n          } else {\n            this.fetchFromRemoteForIdentity(); \n          }\n          \n        }\n        \n        @autobind\n        fetchMine(){\n          // shared_node\n          // \n          return new Promise(async (resolve,reject)=>{\n              \n            try {\n              \n              this.setState({\n                fetchingMine: true\n              })\n              \n              // Get my identity \n              // - should use \"signer\" instead? \n              // - or just look for ones where signer=author \n              let author = this.props.state.OwnerSecondExternalIdentityNode.data.identity; // \"idtest:nick\" or \"internal:main\" ? \n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          \n                          {\n                            matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                            dataForAction: {\n                              type: 'string:...',\n                              data: this.props.state.OwnerSecondExternalIdentityNode.data.token\n                            }\n                          },\n                      \n                          // Part 1/3\n                          // Fetch MY threads (where I am the author) \n                          // - of a \"post:Qmfdlsj\" type \n                          // - use the returned thread_ref to find ALL the related (by me or not) Posts (and other data too, I suppose) \n                          {\n                            matchActionType: 'search_shared_data:Qmksdjhfwekjhdds24f',\n                            dataForAction: {\n                              // type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                              type: 'shared_data_request:Qmsdfljsdj',\n                              data: {\n                                // filter on the ENTIRE shared_node (NOT just on the shared_node data) \n                                dataFilter: {\n                                  'data.type':'code_package:Qmf3289h228fh'\n                                  // 'data.signer': author,\n                                  // 'data.data.author' : author\n                                },\n                              }\n                            }\n                          },\n                          \n                          // // Part 2/3 \n                          // // - reduce above (from requestCache) to thread_ref, and use in next step! \n                          // {\n                          //   matchActionType: 'reduce_search:Qmlfjsdlsf',\n                          //   dataForAction: {\n                          //     // type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                          //     type: 'reduce_request:Qmsf89h923sf',\n                          //     data: {\n                              \n                          //       type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n                          //       data: {\n                          //         code: `(()=>{\n                          //           return new Promise(async (resolve,reject)=>{\n                          //             // Part 2/3\n                          //             // Reduce for next step \n                          //             // - setting requestVariables too \n                                      \n                          //             let requestCache = INPUT.data.requestCache; \n                          //             // await universe.getRequestCache();\n                                      \n                          //             let lastRequestResults;\n                          //             try {\n                          //               lastRequestResults = requestCache.keyvalue.request1; // 1st/2nd request (depending on authtoken)\n                          //             }catch(err){\n                          //               console.error(err);\n                          //             }\n                                      \n                          //             lastRequestResults = lastRequestResults || [];\n                                      \n                          //             let threadRefs = lastRequestResults.map(req=>{\n                          //               return req.data.data.thread_ref;\n                          //             });\n                                      \n                                      \n                          //             // return inputNode;\n                          //             return resolve({\n                          //               type: 'array_of_refs:Qmdslfjsdlf22',\n                          //               data: {\n                          //                 refs: threadRefs\n                          //               }\n                          //             });\n                                      \n                          //           });\n                          //         })()`\n                          //       }\n                          //     },\n                              \n                          //   }\n                          // },\n                          \n                          \n                          // // Part 3/3\n                          // // Fetch data for thread_refs (includes My results too) \n                          // // - of a \"post:Qmfdlsj\" type \n                          // // - use the returned thread_ref to find ALL the related (by me or not) Posts (and other data too, I suppose) \n                          // {\n                          //   matchActionType: 'search_shared_data:Qmksdjhfwekjhdds24f',\n                          //   dataForAction: {\n                          //     // type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                          //     type: 'shared_data_request:Qmsdfljsdj',\n                          //     data: {\n                          //       dataFilter: {\n                          //         'data.data.thread_ref': {\n                          //           // $in: \"[[$$test.test1$$]]\",\n                          //           $in: \"[[$$(INPUT.data.requestCache.keyvalue.request2.data.refs)$$]]\"\n                          //         }\n                          //       },\n                          //       // matchFunctionNode: {\n                          //       //   // query here!\n                          //       //   // action_pointer:0.0.1:local:238972ncr\n                          //       //   type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n                          //       //   data: {\n                          //       //     code: `(()=>{\n                          //       //       // Part 3/3\n                                      \n                          //       //       // return all results that match thread_ref! \n                          //       //       // - me, plus anyone else! \n                                      \n                          //       //       let inputNode = INPUT.data.inputNode;\n                                      \n                          //       //       let requestCache = INPUT.data.requestCache; \n                                      \n                          //       //       let threadRefResultNode;\n                          //       //       try {\n                          //       //         threadRefResultNode = requestCache.keyvalue.request1; // 2nd/3rd request (depending on authtoken)\n                          //       //       }catch(err){\n                          //       //         console.error(err);\n                          //       //       }\n                                      \n                          //       //       // console.log('threadRefResultNode',threadRefResultNode);\n                                      \n                          //       //       let threadRefs = threadRefResultNode.data.refs;\n                                      \n                          //       //       if(threadRefs.indexOf(inputNode.data.data.thread_ref) === -1){\n                          //       //         return false;\n                          //       //       }\n                                      \n              \n                          //       //       return inputNode;\n                                      \n                          //       //     })()`\n                          //       //   }\n                          //       // },\n                          //       // expected/allowed schemas for return \n                          //       // outputSchemas: [\n                          //       //   'query_result:0.0.1:local:32490usfj23o23f',\n                          //       //   'internal_error_output:0.0.1:local:32948x2u3cno2c'\n                          //       // ]\n                          //     }\n                          //   }\n                          // },\n                          \n                          // // TODO: clear results I dont care about (map->reduce...kill all the map results!) \n                          \n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              // let nodes = universe.lodash.find(response.data.actionResponses[0].data[0].nodes,{type: 'code:0.0.1:local:32498h32f2'});\n              let nodes = response.data.actionResponses[1].data;\n              \n              // Create trees from nodes (in_reply_to) \n              // - get all of my unique Posts \n              let SharedDataNodes = universe.lodash.uniq(nodes.filter(node=>{\n                // filter \n                return node.data.data.author == author;\n              }), node=>{\n                // uniq filter \n                return node.data._id; // unique id of source (identity:address) \n              }).sort((a,b)=>{\n                // newest at top \n                return a.data.data.createdAt < b.data.data.createdAt;\n              });\n              // function getChildren(nodes){\n              //   nodes.map(node=>{\n                  \n              //   })\n              // }\n              // getChildren(nodes);\n              \n              console.log('SharedDataNodes', SharedDataNodes);\n              \n              // let componentNode = await universe.runInVM(result[0],{});\n              this.setState({\n                SharedDataNodes,\n                fetchingMine: false\n              })\n              \n            } catch(err){\n              console.error('Failed getting local nodes');\n              \n              this.setState({\n                fetchingMine: false\n              })\n              \n            }\n            \n          });\n          \n          \n        }\n        \n        @autobind\n        fetchFromRemoteForIdentity(props){\n          // fetching data from a remote (syndicated-to) Second \n          // - data for a Single person's thread \n          \n          this.setState({\n            fetchingRemote: true\n          });\n          \n          props = props || this.props;\n          \n          console.log('fetchFromRemoteForIdentity.New Props', props);\n          console.log('this.props.state.OwnerSecondExternalIdentityNode', this.props.state.OwnerSecondExternalIdentityNode);\n          \n          let {\n            viewingIdentity,\n            searchIdentity\n          } = props;\n          \n          let viewIdentity = viewingIdentity;\n          \n          console.log('viewingIdentity',viewingIdentity, searchIdentity);\n          \n          // \n          return new Promise(async (resolve,reject)=>{\n              \n            try {\n              \n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          \n                          {\n                            matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                            dataForAction: {\n                              type: 'string:...',\n                              data: this.props.state.OwnerSecondExternalIdentityNode.data.token\n                            }\n                          },\n                          \n                          {\n                            matchActionType: 'remote_run_action_sequence_authorized:Qm329f83289hsf',\n                            dataForAction: {\n                              type: 'remote_action_sequence_input:Qmf8329j29388923h8f22f',\n                              data: {\n                                // who to search (by identity, token) \n                                // action_sequence array \n                                \n                                identity: searchIdentity,\n                                // internalId: ExternalIdentityNode._id,\n                                // publicKey: ExternalIdentityNode.data.publicKey,\n                                \n                                actions: [\n                                  \n                                  // identify_via_token is added automatically to the beginning of the sequence\n                                  // {\n                                  //   matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                                  //   dataForAction: {\n                                  //     type: 'string:...',\n                                  //     data: this.props.state.OwnerSecondExternalIdentityNode.data.token\n                                  //   }\n                                  // },\n                              \n                                  // Part 1/3\n                                  // Fetch MY threads (where I am the author) \n                                  // - of a \"post:Qmfdlsj\" type \n                                  // - use the returned thread_ref to find ALL the related (by me or not) Posts (and other data too, I suppose) \n                                  {\n                                    matchActionType: 'search_shared_data:Qmksdjhfwekjhdds24f',\n                                    dataForAction: {\n                                      // type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                                      type: 'shared_data_request:Qmsdfljsdj',\n                                      data: {\n                                        // filter on the ENTIRE shared_node (NOT just on the shared_node data) \n                                        dataFilter: {\n                                          'data.signer': viewIdentity,\n                                          'data.data.author' : viewIdentity\n                                        },\n                                      }\n                                    }\n                                  },\n                                  \n                                  // Part 2/3 \n                                  // - reduce above (from requestCache) to thread_ref, and use in next step! \n                                  {\n                                    matchActionType: 'reduce_search:Qmlfjsdlsf',\n                                    dataForAction: {\n                                      // type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                                      type: 'reduce_request:Qmsf89h923sf',\n                                      data: {\n                                      \n                                        type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n                                        data: {\n                                          code: `(()=>{\n                                            return new Promise(async (resolve,reject)=>{\n                                              // Part 2/3\n                                              // Reduce for next step \n                                              // - setting requestVariables too \n                                              \n                                              let requestCache = INPUT.data.requestCache; \n                                              // await universe.getRequestCache();\n                                              \n                                              let lastRequestResults;\n                                              try {\n                                                lastRequestResults = requestCache.keyvalue.request1; // 1st/2nd request (depending on authtoken)\n                                              }catch(err){\n                                                console.error(err);\n                                              }\n                                              \n                                              lastRequestResults = lastRequestResults || [];\n                                              \n                                              let threadRefs = lastRequestResults.map(req=>{\n                                                return req.data.data.thread_ref;\n                                              });\n                                              \n                                              \n                                              // return inputNode;\n                                              return resolve({\n                                                type: 'array_of_refs:Qmdslfjsdlf22',\n                                                data: {\n                                                  refs: threadRefs\n                                                }\n                                              });\n                                              \n                                            });\n                                          })()`\n                                        }\n                                      },\n                                      \n                                    }\n                                  },\n                                  \n                                  \n                                  // Part 3/3\n                                  // Fetch data for thread_refs (includes My results too) \n                                  // - of a \"post:Qmfdlsj\" type \n                                  // - use the returned thread_ref to find ALL the related (by me or not) Posts (and other data too, I suppose) \n                                  {\n                                    matchActionType: 'search_shared_data:Qmksdjhfwekjhdds24f',\n                                    dataForAction: {\n                                      // type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                                      type: 'shared_data_request:Qmsdfljsdj',\n                                      data: {\n                                        dataFilter: {\n                                          'data.data.thread_ref': {\n                                            // $in: \"[[$$test.test1$$]]\",\n                                            $in: \"[[$$(INPUT.data.requestCache.keyvalue.request2.data.refs)$$]]\"\n                                          }\n                                        },\n                                      }\n                                    }\n                                  },\n                                  \n                                  // TODO: clear results I dont care about (map->reduce...kill all the map results!) \n                                  \n                                ]\n                                \n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              // let nodes = universe.lodash.find(response.data.actionResponses[0].data[0].nodes,{type: 'code:0.0.1:local:32498h32f2'});\n              console.log('FullExternalResponse', response);\n              \n              \n              // let nodes = universe.lodash.find(response.data.actionResponses[0].data[0].nodes,{type: 'code:0.0.1:local:32498h32f2'});\n              let nodes = response.data.actionResponses[1].data.actionResponses[3].data;\n              \n              console.log('Posts:', nodes.length, nodes);\n              \n              // Create trees from nodes (in_reply_to) \n              // - get all of my unique Posts \n              let SharedDataNodes = universe.lodash.uniq(nodes.filter(node=>{\n                // filter \n                return node.data.data.author == viewIdentity;\n              }), node=>{\n                // uniq filter \n                return node.data._id; // unique id of source (identity:address) \n              }).sort((a,b)=>{\n                // newest at top \n                return a.data.data.createdAt < b.data.data.createdAt;\n              });\n              \n              \n              this.setState({\n                SharedDataNodes,\n                // fetchingMine: false\n              })\n              \n              \n            } catch(err){\n              console.error('Failed getting local nodes', err);\n            }\n            \n              \n            this.setState({\n              fetchingRemote: false\n            });\n            \n          \n          });\n          \n        }\n        \n        @autobind\n        handleViewPackage(codePackageNode){\n          // View a Code Package \n          console.log('codePackageNode', codePackageNode);\n          \n          this.setState({\n            tabsCodePackageMainSelected: 'details',\n            selectedCodePackageNode: codePackageNode,\n            codePackageOutputNode: null // kill previous output result\n          });\n          \n        }\n        \n        @autobind\n        async handleCreatePost(){\n          \n          let text = this.state.postText;\n          if(!text){\n            return false;\n          }\n          \n          let title = this.state.postTitle;\n          if(!title){\n            return false;\n          }\n          \n          let postGroupNodeId = this.state.postGroupNodeId;\n          if(!postGroupNodeId){\n            WINDOW.alert('Group required');\n            return false;\n          }\n          \n          let groupNode = this.state.groups.find(n=>{\n            return n._id == postGroupNodeId;\n          });\n          \n          console.log('State:', this.state);\n          \n          let sharedNode = {\n            type: 'code_package:Qmf3289h228fh',\n            data: {\n              // in_reply_to: null,\n              // thread_ref: universe.uuidv4(),\n              // message: text,\n              title,\n              author: this.props.state.OwnerSecondExternalIdentityNode.data.identity, // \"idtest:nick\"\n              createdAt: Date.now(), // utc milliseconds since epoch \n              //visibility: 'public' // TODO: give simple direction on how to spread this data, if allowed \n              // usageLicense: \"Qmsdfljfl...\" // provide a usage license with your created content? \n              // TODO: verified/signed timestamp for this message (3rd party),\n              nodes: [{\n                type: 'code:0.0.1:local:32498h32f2',\n                data: {\n                  code: text\n                }\n              }]\n            }\n          }\n          \n          // should be OK to contain a code template \n          let permissionsNode = {\n            type: 'syndication_permissions:Qmsdfkjsl2fj9vxc',\n            data: {\n              rules: [{\n                type: 'allow_group:Qmsfkdljodsnkv',\n                data: {\n                  groupKey: groupNode.data.key\n                }\n              }]\n            }\n          };\n          \n          let syndicateToNode = {}; // done automatically, but could also provide a \"specifically syndicate this data somewhere\" node ? \n          \n          let saveSharedNode = await this.createNodeOnSecond(sharedNode, permissionsNode, syndicateToNode);\n          \n          console.log('saveSharedNode',saveSharedNode);\n          \n          // // refetch \n          // this.fetchMine();\n          \n          \n        }\n        \n        @autobind\n        createNodeOnSecond(sharedNode, permissionsNode, syndicateToNode){\n          return new Promise(async (resolve, reject) => {\n            \n            console.log('NewNode:', sharedNode);\n                \n            // Make request to save Node on remote \n            try {\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          \n                          {\n                            matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                            dataForAction: {\n                              type: 'string:...',\n                              data: this.props.state.OwnerSecondExternalIdentityNode.data.token\n                            }\n                          },\n                          \n                          {\n                            matchActionType: 'create_and_syndicate:Qmwlekjfwl',\n                            dataForAction: {\n                              type: 'create_and_syndicate_data:Qmskfjwoesjf',\n                              data: {\n                                sharedNode, // should include author=Second \n                                permissionsNode, // who can access this, get syndicated also \n                                syndicateToNode // where to syndicate this sharedNode  \n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              console.log('create_and_syndicate response:', response);\n              \n              // get the created node \n              let savedNode = response.data.actionResponses[1];\n              \n              // console.log('Saved Node:', savedNode);\n            \n              try {\n                universe.EE.emit('nodes-modified', '');\n              }catch(err){\n                console.error(err);\n              }\n              \n              return resolve(savedNode);\n              \n              // this.setState({\n              //   saving: false\n              // })\n              \n            } catch(err){\n              console.error('Failed getting local nodes');\n              \n              // alert('Failed');\n              \n              // this.setState({\n              //   saving: false\n              // })\n              \n            }\n            \n          })\n        }\n        \n        @autobind\n        handleUpdatePost(){\n        }\n        \n        @autobind\n        handleRemovePost(){\n        }\n        \n        @autobind\n        handleUpdatePostTitle(e){\n          this.setState({\n            postTitle: e.target.value\n          });\n        }\n        \n        @autobind\n        handleUpdatePostText(e){\n          this.setState({\n            postText: e.target.value\n          });\n        }\n        \n        @autobind\n        handleUpdateSyndicationSearchTarget(e){\n          // TODO: add multiple groups, identities, deny rules, etc. ! \n          this.setState({\n            searchIdentity: e.target.value\n          });\n        }\n        \n        @autobind\n        handleUpdateViewIdentityType(e){\n          // TODO: add multiple groups, identities, deny rules, etc. ! \n          this.setState({\n            viewIdentityType: e.target.value\n          });\n        }\n        \n        \n        @autobind\n        handleUpdatePostGroup(e){\n          // TODO: add multiple groups, identities, deny rules, etc. ! \n          this.setState({\n            postGroupNodeId: e.target.value\n          });\n        }\n        \n        @autobind\n        async executeRunCodePackage(){\n          \n          // TODO: if should run on server: create a \"run this on server\" action \n          \n          let codePackageNode = this.state.selectedCodePackageNode;\n          // codePackageNode.data.data.nodes[0].data.code\n          \n          let codeNode = codePackageNode.data.data.nodes[0];\n          \n          console.log('CodeNode to run:', codeNode);\n          \n          console.log('executeRunCodePackage...');\n          let executeRunCodePackageResult = await universe.runInVM(codeNode,{});\n          console.log('executeRunCodePackage Result:', executeRunCodePackageResult);\n          this.setState({\n            codePackageOutputNode: executeRunCodePackageResult\n          })\n          \n        }\n        \n        @autobind\n        renderSnippets(){\n          // console.log('Rendering MainHomeComponent.renderSnippets');\n          if(!this.state.SharedDataNodes.length && this.state.fetchingMine){\n            return (\n              <div>\n                <i>Finding code snippets</i>\n              </div>\n            )  \n          }\n          \n          return this.state.SharedDataNodes.map((codePackageNode,idx)=>{\n            \n            return (\n              <div key={codePackageNode._id} style={{paddingBottom:\"8px\", width:\"380px\"}}>\n                <div className=\"box\" style={{position:'relative'}} onClick={()=>this.handleViewPackage(codePackageNode)}>\n                  <div>\n                    {\n                      codePackageNode.data.data.title\n                    }\n                  </div>\n                  <div>\n                    - {\n                      codePackageNode.data.data.author.split(':').slice(1).join(':')\n                    }\n                  </div>\n                  <div>\n                    <small>{codePackageNode.data.data.createdAt}</small>\n                  </div>\n                </div>\n              </div>\n            )\n          })\n        }\n        \n        @autobind\n        renderCodePackage(){\n          let codePackageNode = this.state.selectedCodePackageNode;\n          if(!codePackageNode){\n            return (\n              <div>\n                <br /><br /><br /><br />\n                <i>none selected</i>\n              </div>\n            )\n          }\n          \n          let OutputNode;\n          let codePackageOutputNode = this.state.codePackageOutputNode;\n          try {\n            if(codePackageOutputNode){\n              switch(codePackageOutputNode.type ? codePackageOutputNode.type.split(':')[0]:null){\n                case 'react_component':\n                  // console.log('OutputNode is react component');\n                  OutputNode = codePackageOutputNode.data\n                  break;\n                  \n               case 'string_output':\n                  // console.log('OutputNode is a String');\n                  OutputNode = function(){\n                    return <div><pre><code>{codePackageOutputNode.data.string}</code></pre></div>\n                  }\n                  break;\n                \n                default:\n                  // console.log('OutputNode is Not a react component');\n                  OutputNode = function(){\n                    return <div><pre><code>{JSON.stringify(codePackageOutputNode,null,2)}</code></pre></div>\n                  }\n              }\n            }\n          }catch(err){\n            OutputNode = function(){\n              return <div><pre><code>Output Failed.<br />{JSON.stringify(err,null,2)}</code></pre></div>\n            }\n          }\n          \n          let tabsCodePackageMain = [\n            ['details','Details'],\n            ['reqs','Requirements'],\n            ['actions', 'Actions/Run'],\n            ['code', 'Code'],\n          ];\n          \n          // console.log('OutputNode:', OutputNode);\n          \n          return (\n            <div>\n              <br /><br /><br /><br />\n              <h2 className=\"title is-4\">\n                {\n                  codePackageNode.data.data.title || '[missing title]'\n                }\n              </h2>\n              \n              <div className=\"tabs\">\n                <ul>\n                  {\n                    tabsCodePackageMain.map(tab=>(\n                      <li key={tab[0]}\n                        onClick={e=>this.setState({tabsCodePackageMainSelected:tab[0]})}\n                        className={(this.state.tabsCodePackageMainSelected == tab[0]) ? 'is-active':''}\n                        ><a>{tab[1]}</a></li>\n                    ))\n                  }\n                </ul>\n              </div>\n              \n              {\n                this.state.tabsCodePackageMainSelected != 'details' ? '':\n                <div>\n                  <div>\n                    <strong>Author:</strong> {\n                      codePackageNode.data.data.author.split(':').slice(1).join(':')\n                    }\n                  </div>\n                  <div>\n                    <strong>Created:</strong> {\n                      universe.moment(codePackageNode.data.data.createdAt,'x').format(\"dddd, MMMM Do YYYY, h:mm:ss a\")\n                    }\n                  </div>\n                </div>\n              }\n              \n              {\n                this.state.tabsCodePackageMainSelected != 'reqs' ? '':\n                <div>\n                  <div>\n                    <strong>Platform:</strong> Browser\n                  </div>\n                  <div>\n                    <strong>Context:</strong> Same (vs. Isolated, needs access to what?) \n                  </div>\n                  <div>\n                    <strong>UI:</strong> Browser (vs. NodeAPI for server?)  \n                  </div>\n                  \n                </div>\n              }\n              \n              {\n                this.state.tabsCodePackageMainSelected != 'actions' ? '':\n                <div>\n                  <div>\n                    <div className=\"field is-grouped\">\n                      <div className=\"control\">\n                        <button className='button is-default' onClick={this.executeRunCodePackage}>\n                          Run\n                        </button>\n                      </div>\n                      <div className=\"control\">\n                        <button className='button is-default' disabled>\n                          Test\n                        </button>\n                      </div>\n                      <div className=\"control\">\n                        <button className='button is-default' disabled>\n                          Install on Cloud\n                        </button>\n                      </div>\n                      <div className=\"control\">\n                        <button className='button is-default' disabled>\n                          Copy and Modify\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                      \n                  {\n                    !OutputNode ? '':\n                    <div style={{marginTop:'16px', padding:'8px',border:'1px solid #eaeaea',background:'#f8f8f8'}}>\n                      Output:\n                      <br />\n                      <div style={{border:'1px solid #ccc', padding:'4px', borderRadius:'3px',background:'white'}}>\n                        <OutputErrorCatcherComponent>\n                          <OutputNode />\n                        </OutputErrorCatcherComponent>\n                      </div>\n                    </div>\n                  }\n                  \n                </div>\n              }\n            \n              \n              {\n                this.state.tabsCodePackageMainSelected != 'code' ? '':\n                <div>\n                  <pre><code>{codePackageNode.data.data.nodes[0].data.code}</code></pre>\n                </div>\n              }\n              \n            </div>\n          )\n          \n        }\n        \n        render(){\n          // console.log('Rendering MainHomeComponent');\n          return (\n            <div className=\"container\" style={{marginTop:'0.75em'}}>\n              <div className=\"columns\">\n                <div className=\"column is-6\">\n                \n                  <br />\n                  \n                  <div className=\"field has-addons\" style={{display:'none'}}>\n                    <div className=\"control\">\n                      <button className={\"button is-default\"} onClick={this.fetchMine}>\n                        Fetch Mine\n                      </button>\n                      <button className={\"button is-default\"} onClick={e=>this.fetchFromRemoteForIdentity(this.props)}>\n                        Fetch Remote/Syndicated\n                      </button>\n                    </div>\n                    {\n                      !this.state.fetchingRemote ? '':\n                      <div className=\"control\">\n                        <a className=\"button is-loading\">\n                          &nbsp;\n                        </a>\n                      </div>\n                    }\n                  </div>\n                  \n                  {/* Filter */}\n                  <div className=\"field is-grouped\">\n                    <div className=\"control is-expanded\">\n                      <input className=\"input\" value={this.state.filterText} onChange={e=>this.setState({filterText:e.target.value})} placeholder=\"Filter\" />\n                    </div>\n            \n                    <div className=\"control\">\n                    \n                      <div className=\"select\">\n                        <select onChange={this.handleUpdateSyndicationSearchTarget} value={this.state.searchIdentity}>\n                          {\n                            this.state.allExternalConnections.filter(e=>{return e.data.identity}).map(externalIdentity=>(\n                              <option key={externalIdentity._id} value={externalIdentity.data.identity}>{externalIdentity.data.identity}</option>\n                            ))\n                          }\n                          {\n                            (!this.state.allExternalConnections.length && this.state.fetchingConnections) ?\n                            <option>Loading sources</option>\n                            :''\n                          }\n                        </select>\n                      </div>\n                      \n                    </div>\n                    \n                    <div className=\"control\">\n                      <button className={\"button is-info \" + (this.state.fetchingForSearch ? 'is-loading':'')} onClick={this.fetchSelected}>\n                        Find Code\n                      </button>\n                    </div>\n                    \n                    <div className=\"control\" style={{lineHeight:'34px'}}>\n                      |\n                    </div>\n                    \n                    \n                    <div className=\"control\">\n                      <button className={\"button is-info \"} onClick={e=>this.setState({showNewCode: !this.state.showNewCode})}>\n                        New Code\n                      </button>\n                    </div>\n                    \n                  </div>\n                  \n                  \n                  {/* Creating new snippet */}\n                  {\n                    !this.state.showNewCode ? '':\n                    <div>\n                      <hr />\n                      <div className=\"field\">\n                        <div className=\"control\">\n                          <input className=\"input\" placeholder=\"Title\" value={this.state.postTitle} onChange={this.handleUpdatePostTitle} disabled={this.state.isPosting} />\n                        </div>\n                      </div>\n                      <div className=\"field\">\n                        <div className=\"control\">\n                          <textarea className=\"textarea\" placeholder=\"Code\" value={this.state.postText} onChange={this.handleUpdatePostText} disabled={this.state.isPosting} />\n                        </div>\n                      </div>\n                      <div className=\"level\">\n                        <div className=\"level-left\">\n                          <div className=\"level-item\">\n                          \n                            <button className={\"button is-info \" + (this.state.isPosting ? 'is-loading':'')} onClick={this.handleCreatePost}>\n                              + New Code Snippet\n                            </button>\n                            \n                          </div>\n                          <div className=\"level-item\">\n                          \n                            <div className=\"field\">\n                              <div className=\"control\">\n                                <div className=\"select\">\n                                  <select onChange={this.handleUpdatePostGroup} value={this.state.postGroupNodeId}>\n                                    <option>Audience:</option>\n                                    {\n                                      this.state.groups.map(groupNode=>(\n                                        <option key={groupNode._id} value={groupNode._id}>{groupNode.data.name}</option>\n                                      ))\n                                    }\n                                    {\n                                      (!this.state.groups.length && this.state.fetchingGroups) ?\n                                      <option>Loading groups</option>\n                                      :''\n                                    }\n                                  </select>\n                                </div>\n                              </div>\n                            </div>\n                            \n                          </div>\n                        </div>\n                        \n                      </div>\n                    </div>\n                  }\n                  \n                  <hr />\n                  \n                  {/*\n                  <div className=\"field has-addons\">\n                    <div className=\"control\">\n                      <button className=\"button\" onClick={this.fetchFromRemoteForIdentity}>\n                        Fetch Latest\n                      </button>\n                    </div>\n                    {\n                      !this.state.fetchingRemote ? '':\n                      <div className=\"control\">\n                        <a className=\"button is-loading\">\n                          &nbsp;\n                        </a>\n                      </div>\n                    }\n                  </div>\n                  */}\n                    \n                  \n                  <br />\n                  \n                  <div>\n                    {\n                      this.renderSnippets()\n                    }\n                  </div>\n                  \n                </div>\n                \n                <div className=\"column is-6\">\n                  {\n                    this.renderCodePackage()\n                  }\n                </div>\n                \n              </div>\n            </div>\n          )\n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      \n      const styles = {\n        deleteIcon: {\n          position: 'absolute',\n          top: '0px',\n          right: '-24px',\n          cursor: 'pointer'\n        }\n      }\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "MainHomeComponent"
  }
}