{
  "type": "react_component:0.0.1:local:98912hd89",
  "name": "MainIPFSComponent",
  "data": {
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----",
    "version": "1",
    "key": "3132a429-1d54-4d43-820b-4c13b964f23b",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Select = universe.ReactSelect;\n      \n      class NewIPFSFile extends React.Component {\n        constructor(props){\n          super(props);\n          \n          this.state = {\n            value: '{}'\n          }\n          \n        }\n        \n        @autobind\n        handleStringify(){\n          // parse and stringify \n          let value = this.state.value;\n          try {\n            value = JSON.stringify(JSON.parse(value),null,2);\n            this.setState({\n              value\n            });\n          }catch(err){\n            console.error('Failed converting to JSON', err);\n          }\n        }\n        \n        @autobind\n        handleCreate(){\n          // shared_node\n          // \n          return new Promise(async (resolve,reject)=>{\n              \n            let fileValue = this.state.value;\n              \n            try {\n              \n              this.setState({\n                isCreating: true\n              })\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          \n                          {\n                            matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                            dataForAction: {\n                              type: 'string:...',\n                              data: this.props.state.OwnerSecondExternalIdentityNode.data.token\n                            }\n                          },\n                      \n                          { \n                            matchActionType: 'ipfs_file_add:Qmfmk230fjs',\n                            dataForAction: {\n                              type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                              data: {\n                                type: 'file_with_data_and_options:Qmdf23ifsmkmm',\n                                data: {\n                                  options: {\n                                    pin: true\n                                  },\n                                  fileValue\n                                }\n                              }\n                            }\n                          },\n                          \n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              console.log('Response:', response);\n              \n              let hash = response.data.actionResponses[1].data.hash;\n              \n              // Pin! \n              \n              \n            } catch(err){\n              console.error('Failed TalkToSecond request', err);\n              reject();\n            }\n          \n            this.setState({\n              isCreating: false\n            })\n            \n            \n            return;\n            \n          });\n          \n        }\n        \n        render(){\n          return (\n            <div>\n        \n              <h3 className=\"title is-3\">\n                New Pinned File \n              </h3>\n              \n              <br />\n              \n              <div className=\"field\">\n              \n                <div className=\"control\">\n                  <textarea className=\"textarea\" value={this.state.value} onChange={e=>this.setState({value:e.target.value})} placeholder=\"Input\" />\n                </div>\n                \n              </div>\n              \n              <div className=\"field is-grouped\">\n              \n                <div className=\"control\">\n                  <button className={\"button is-success \" + (this.state.isCreating ? 'is-loading':'')} onClick={this.handleCreate}>Create</button>\n                </div>\n                \n                <div className=\"control\">\n                  <button className=\"button is-default \" onClick={this.handleStringify}>Stringify</button>\n                </div>\n                \n              </div>\n            \n            </div>\n          )\n        }\n      }\n      \n      NewIPFSFile = universe.ReactGlobalState(NewIPFSFile);\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          \n          let searchIdentity;\n          try {\n            searchIdentity = props.state.OwnerSecondExternalIdentityNode.data.identity;\n          }catch(err){\n            console.error('Missing props.state.OwnerSecondExternalIdentityNode.data.identity', err);\n          }\n          \n          this.state = {\n            Pins: [],\n            MetadataOverlays: [],\n            filterText: '',\n            viewing: null, // 'new', 'file'\n          }\n        }\n        \n        componentDidMount(){\n          \n          console.log('Loaded MainSituationListComponent');\n          \n          if(this.props.initEditComponent){\n            this.props.initEditComponent(this);\n          }\n            \n          this.startup();\n            \n        }\n        \n        @autobind\n        async startup(){\n          // this.fetchGroups();\n          // this.fetchExternalConnections();\n          \n          await this.loadComponents();\n          \n          // // this.fetchFromRemoteForIdentity(this.props);\n          // this.fetchGroups();\n          // this.fetchExternalConnections();\n          this.fetchMine();\n          \n          // this.fetchPossibleMatches();\n          // this.fetchPossibleActions();\n          \n        }\n        \n        @autobind\n        async loadComponents(){\n          \n          // Not async for setState! \n          \n          let components = [\n          ];\n          \n          for(let componentInternalId of components){\n            await this.loadComponent(componentInternalId);\n            universe.EE.on('local-react-node-modified:' + componentInternalId, ()=>{\n              this.loadComponent(componentInternalId);\n            });\n          }\n          \n        }\n        \n        @autobind\n        async loadComponent(componentInternalId){\n          try {\n            let Component = await this.props.loadComponent({\n              internalId: componentInternalId\n            });\n            let obj = {};\n            obj[componentInternalId] = Component;\n            this.setState(obj)\n          }catch(err){\n            console.error(\"Failed loading component:\",componentInternalId);\n          }\n        }\n        \n        @autobind\n        fetchMine(){\n          // shared_node\n          // \n          return new Promise(async (resolve,reject)=>{\n              \n            try {\n              \n              this.setState({\n                fetchingMine: true\n              })\n              \n              // Get my identity \n              // - should use \"signer\" instead? \n              // - or just look for ones where signer=author \n              let author = this.props.state.OwnerSecondExternalIdentityNode.data.identity; // \"idtest:nick\" or \"internal:main\" ? \n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          \n                          {\n                            matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                            dataForAction: {\n                              type: 'string:...',\n                              data: this.props.state.OwnerSecondExternalIdentityNode.data.token\n                            }\n                          },\n                      \n                          { \n                            matchActionType: 'ipfs_pin_ls:Qmf32j23',\n                            dataForAction: {\n                              type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                              data: {}\n                            }\n                          },\n                                \n                          {\n                            matchActionType: 'reduce_search:Qmlfjsdlsf',\n                            dataForAction: {\n                              // type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                              type: 'reduce_request:Qmsf89h923sf',\n                              data: {\n                                // type: 'reduce_template_from_ipfs:Qmfwelfj23',\n                                // data: {\n                                //   template: '', // ipfs hash of template \n                                //   vars: {}\n                                // },\n                                type: 'code_miniverse:0.0.1:local:2782fh8823s23',\n                                data: {\n                                  code: `(()=>{\n                                    return new Promise(async (resolve,reject)=>{\n                                      \n                                      let requestCache = INPUT.data.requestCache; \n                                      let varToGroupBy = 'hash';\n                                      \n                                      let lastRequestResult;\n                                      try {\n                                        lastRequestResult = requestCache.keyvalue.request1.data; // 1st/2nd request (depending on authtoken)\n                                      }catch(err){\n                                        console.error(err);\n                                      }\n                                      \n                                      console.log('lastRequestResult1111',lastRequestResult);\n                                      \n                                      lastRequestResult = lastRequestResult || [];\n                                      \n                                      let grouped = lastRequestResult.map(nodeObj=>{\n                                        let rval;\n                                        console.log('nodeObj:', JSON.stringify(nodeObj));\n                                        try{\n                                          rval = varToGroupBy.split('.').reduce((o,i)=>o[i], nodeObj)\n                                        }catch(err){}\n                                        return rval;\n                                      });\n                                      \n                                      console.log('GROUPED:', grouped);\n                                      \n                                      // return inputNode;\n                                      return resolve({\n                                        type: 'grouped_array:Qm3289h3f',\n                                        data: {\n                                          grouped\n                                        }\n                                      });\n                                      \n                                    });\n                                  })()`\n                                }\n                              },\n                              \n                            }\n                          },\n                          \n                          {\n                            matchActionType: 'search_shared_data:Qmksdjhfwekjhdds24f',\n                            dataForAction: {\n                              // type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                              type: 'shared_data_request:Qmsdfljsdj',\n                              data: {\n                                dataFilter: {\n                                  'data.data.target.data.hash': {\n                                    $in: \"[[$$(INPUT.data.requestCache.keyvalue.request2.data.grouped)$$]]\"\n                                  }\n                                },\n                              }\n                            }\n                          },\n                          \n                          \n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              console.log('Response:', response);\n              \n              // let nodes = universe.lodash.find(response.data.actionResponses[0].data[0].nodes,{type: 'code:0.0.1:local:32498h32f2'});\n              let Pins = response.data.actionResponses[1].data;\n              \n              let MetadataOverlays = response.data.actionResponses[3].data;\n              \n              if(!universe.lodash.isArray(Pins)){\n                console.error('Failed Pins!');\n                Pins = [];\n              }\n              \n              if(!universe.lodash.isArray(MetadataOverlays)){\n                console.error('Failed MetadataOverlays!');\n                MetadataOverlays = [];\n              }\n              \n              // console.log('Pins', Pins);\n              // console.log('MetadataOverlays', MetadataOverlays);\n              \n              // let componentNode = await universe.runInVM(result[0],{});\n              this.setState({\n                Pins,\n                MetadataOverlays\n              }, resolve)\n              \n              \n            } catch(err){\n              console.error('Failed getting local nodes', err);\n              WINDOW.alert('Failed retrieving Pins. IPFS likely stopped');\n              reject();\n            }\n          \n            this.setState({\n              fetchingMine: false\n            })\n            \n            \n            return;\n            \n          });\n          \n        }\n        \n        @autobind\n        handleViewPin(situationMatchActionNodeId){\n          // View a Situation\n          console.log('situationMatchActionNode', situationMatchActionNodeId);\n          \n          this.setState({\n            tabsSituationMatchActionMainSelected: 'matches',\n            selectedSituationMatchActionNodeId: situationMatchActionNodeId,\n            // situationMatchActionOutputNode: null // kill previous output result\n          });\n          \n        }\n        \n        @autobind\n        handleEditPin(situationMatchActionNode){\n          // View a Code Package \n          console.log('situationMatchActionNode to edit', situationMatchActionNode);\n          \n          this.props.setState({\n            situationMatchActionNode,\n          }, ()=>{\n            this.props.history.push('/node');\n          });\n          \n        }\n        \n        @autobind\n        handleViewNew(){\n          this.setState({\n            viewing: 'new'\n          });\n        }\n        \n        @autobind\n        renderMetadataForPin(pin){\n          \n          let MetadataOverlays = this.state.MetadataOverlays;\n          let matches = universe.lodash.query(MetadataOverlays, {\n            'data.data.target.data.hash': pin.hash\n          });\n          \n          if(!matches.length){\n            return '';\n          }\n          \n          // TODO: extract title, notes, summarize others (emojis) \n          \n          return (\n            <div>\n              {\n                matches.map(metadataNode=>{\n                  let tmp = '';\n                  try {\n                    switch(metadataNode.data.data.metadata.type.split(':')[0]){\n                      case 'metadata_note':\n                        tmp = metadataNode.data.data.metadata.data.note;\n                        break;\n                        \n                      default:\n                        tmp = 'unknown';\n                        break;\n                    }\n                  }catch(err){\n                    console.error(err)\n                  }\n                  return (<span>{tmp}</span>);\n                })\n              }\n            </div>\n          )\n          \n        }\n        \n        @autobind\n        renderResults(){\n          return (\n            <table className=\"table is-narrow\" style={{width: '100%'}}>\n              <thead>\n                <th>Name</th>\n                <th>Type</th>\n                <th></th>\n              </thead>\n              <tbody>\n                {\n                  this.state.Pins.map(pin=>(\n                   <tr key={pin.hash}>\n                    <td>\n                      <a href={'https://ipfs.io/ipfs/' + pin.hash} target='_blank'>{pin.hash}</a>\n                    </td>\n                    <td>\n                      {\n                        pin.type\n                      }\n                    </td>\n                    <td>\n                      {\n                        this.renderMetadataForPin(pin)\n                      }\n                    </td>\n                   </tr>\n                  ))\n                }\n              </tbody>\n            </table>\n          )\n        }\n        \n        render(){\n          // console.log('Rendering MainHomeComponent');\n          \n          return (\n            <div className=\"container\" style={{marginTop:'0.75em'}} ref={r=>this.ref=r}>\n              <div className=\"columns\">\n                <div className=\"column is-6\">\n                \n                  <br />\n                  \n                  {/* Filter */}\n                  <div className=\"field is-grouped\">\n                  \n                    <div className=\"control is-expanded\">\n                      <input className=\"input\" value={this.state.filterText} onChange={e=>this.setState({filterText:e.target.value})} placeholder=\"Filter IPFS Pins\" />\n                    </div>\n            \n                    <div className=\"control\">\n                      <button className={\"button is-info \" + (this.state.fetchingForSearch ? 'is-loading':'')} onClick={this.fetchMine}>\n                        Find\n                      </button>\n                    </div>\n                    \n                    <div className=\"control\" style={{lineHeight:'34px'}}>\n                      |\n                    </div>\n                    \n                    <div className=\"control\">\n                      \n                      <button className=\"button is-info\" onClick={this.handleViewNew}>\n                        <span>New</span>\n                      </button>\n                      \n                    </div>\n                    \n                  </div>\n                  \n                  \n                  <hr />\n                  \n                  <br />\n                  \n                  <div>\n                    {\n                      this.renderResults()\n                    }\n                  </div>\n                  \n                </div>\n                \n                <div className=\"column is-6\">\n                  {\n                    this.state.viewing == 'new' ?\n                    <NewIPFSFile />\n                    :''\n                  }\n                  {\n                    this.state.viewing == 'file' ?\n                    ''\n                    :''\n                  }\n                  \n                </div>\n                \n              </div>\n            </div>\n          )\n        }\n      }\n      \n      mycomponent = universe.sharedComponents.withEditableNodeInfo(mycomponent, {\n        localNode: SELF\n      });   \n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      mycomponent = universe.ReactRouterDomWithRouter(mycomponent);\n      \n      const styles = {\n        deleteIcon: {\n          position: 'absolute',\n          top: '0px',\n          right: '-24px',\n          cursor: 'pointer'\n        }\n      }\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      console.error(err);\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "MainIPFSComponent"
  }
}