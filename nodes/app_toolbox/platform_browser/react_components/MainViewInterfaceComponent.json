{
  "type": "react_component:0.0.1:local:98912hd89",
  "name": "MainViewInterfaceComponent",
  "data": {
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----",
    "version": "1",
    "key": "75a54150-5c58-497f-bb53-7c8a02fab936",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      let ErrorComponent = (name) => {\n        return class ErrorComponent extends React.Component {\n          constructor(props){\n            super(props);\n            this.state = {}\n          }\n          \n          render(){\n            return (\n              <div>\n                ErrorLoading: {name || 'unknown'}\n              </div>\n            )\n          }\n        }\n      }\n    \n      class OutputErrorCatcherComponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {}\n        }\n        \n        componentDidCatch(error, info) {\n          // Display fallback UI\n          this.setState({ hasError: true });\n          // You can also log the error to an error reporting service\n          console.error('MainSharedDataComponent OutputErrorCatcherComponent componentDidCatch:', error, info);\n        }\n        \n        render(){\n          if(this.state.hasError){\n            return (\n            <div>\n              OutputErrorCatcher\n              <br />\n              <pre><code>[TODO, error output]</code></pre>\n            </div>\n            )\n          }\n          \n          // normal\n          return this.props.children;\n        }\n      }\n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          \n          this.state = {}\n        }\n        \n        componentDidMount(){\n          \n          console.log('Mounted MainViewInterfaceComponent');\n            \n          if(this.props.initEditComponent){\n            this.props.initEditComponent(this);\n          }\n            \n        }\n        \n        render(){\n          \n          // load the Interface's react_component to use \n          let {\n            InterfaceComponent\n          } = this.props.state;\n          \n          let DisplayComponent = InterfaceComponent || ErrorComponent('Viewing InterfaceComponent');\n          \n          return (\n            <DisplayComponent />\n          )\n          \n        }\n      }\n      \n      mycomponent = universe.sharedComponents.withEditableNodeInfo(mycomponent, {\n        localNode: SELF\n      });\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      mycomponent = universe.ReactRouterDomWithRouter(mycomponent);\n      \n      const styles = {\n        deleteIcon: {\n          position: 'absolute',\n          top: '0px',\n          right: '-24px',\n          cursor: 'pointer'\n        }\n      }\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "MainViewInterfaceComponent"
  }
}