{
  "type": "react_component:0.0.1:local:98912hd89",
  "name": "ListFromNodeComponent",
  "data": {
    "version": "1",
    "note": "/dev left side",
    "internalId": "ListFromNodeComponent",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      class ErrorComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              [ErrorRenderer]\n            </div>\n          )\n        }\n      }\n      \n      class ListComponent extends React.Component {\n        constructor(props){\n          super(props);\n          this.state = {\n            nodes: [],\n            text: '',\n            pastable: false,\n            pasteText: ''\n          }\n        }\n        \n        componentDidMount(){\n          // universe.EE.on('nodes-modified', this.fetchRemoteNodes);\n          \n          // set nodes from global state \n          let codePackageNode = this.props.state.codePackageNode;\n          console.log('codePackageNode in ListFromNodeComponent:', codePackageNode);\n          this.setState({\n            nodes: codePackageNode.data.data.nodes\n          })\n        \n        }\n        componentWillUnmount(){\n          // universe.EE.removeListener('nodes-modified', this.fetchRemoteNodes);\n        }\n      \n        @autobind\n        handleNewNode(){\n      \n          return new Promise(async (resolve,reject)=>{\n      \n            let type;\n            type = WINDOW.prompt('Type','');\n            if(!type){\n              return false;\n            }\n            \n            type = type.trim();\n            \n            let name = WINDOW.prompt('Name',universe.uuidv4());\n            if(!name){\n              return false;\n            }\n            \n            // todo: get and validate the type's schema. use schema for default data\n            \n            let newNode = {\n              // nodeId: node._id,\n              name,\n              type,\n              data: null\n            }\n      \n            console.log('newNode:', newNode);\n            \n            let nodes = this.state.nodes || [];\n            nodes.push(newNode);\n            universe.lodash.set(codePackageNode, ['data','data','nodes'], nodes);\n            \n            let codePackageNode = this.props.state.codePackageNode;\n            \n            this.makeSaveRequest(codePackageNode);\n            \n            this.props.setState({\n              codePackageNode\n            });\n          \n            console.log('Saved Node', newNode);\n      \n            try {\n              universe.EE.emit('nodes-modified', '');\n            }catch(err){\n              console.error(err);\n            }\n            \n      \n            // window.location = '/node/' + savedNode._id;\n      \n          });\n      \n        }\n        \n        @autobind\n        makeSaveRequest(nodeToSave, opts, skipEvent){\n          return new Promise(async (resolve, reject) => {\n            \n            this.setState({\n              saving: true\n            })\n            \n            opts = opts || {};\n            \n            // Make request to save Node on remote \n            try {\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          {\n                            matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                            dataForAction: {\n                              type: 'string:...',\n                              data: this.props.state.OwnerSecondExternalIdentityNode.data.token\n                            }\n                          },\n                          {\n                            matchActionType: 'update_node:0.0.2:local:392821982y3',\n                            dataForAction: {\n                              type: 'update_node_data:0.0.2:local:123445',\n                              data: {\n                                optionsNode: {\n                                  type: 'options_generic:0.0.1:local:289f3j29832',\n                                  data: opts || {}\n                                },\n                                dataNode: nodeToSave\n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              console.log('Update response:', response);\n              \n              if(skipEvent !== true){\n                try {\n                  universe.EE.emit('nodes-modified', '');\n                }catch(err){\n                  console.error(err);\n                }\n              }\n              \n              this.setState({\n                saving: false\n              })\n              \n              return resolve({\n                type: 'node:...',\n                data: response.data.actionResponses[1]\n              });\n              \n            } catch(err){\n              console.error('Failed getting local nodes');\n              \n              alert('Failed');\n              \n              this.setState({\n                saving: false\n              })\n              \n              return reject();\n              \n            }\n            \n          })\n        }\n        \n        @autobind\n        handleClickNode(node, nodePath, addPathRoot){\n          console.log('NodePath:', nodePath);\n          this.props.setState({\n            // packageAddPath: addPathRoot ? nodePath : nodePath, // boolean, or data.data.nodes \n            packageEditingNode: node,\n            packageEditingNodePath: nodePath,\n            addToEditingNode: addPathRoot ? \n              this.props.state.codePackageNode.data.data :\n              node,\n            addToEditingNodePath: addPathRoot ? \n              ['data', 'data'] :\n              nodePath\n          })\n        }\n        \n        @autobind\n        handleInsertNodePaste(){\n          \n          return new Promise(async (resolve,reject)=>{\n      \n            let nodeText = this.state.pasteText; //WINDOW.prompt('Node JSON String','');\n            if(!nodeText){\n              return false;\n            }\n            \n            let node = JSON.parse(nodeText);\n            console.log('Node input:', node);\n            \n            // Create this new one, then iterate down the tree of kids \n            // - if this one has a nodeId, ask if we want to keep it? \n            let confirmed = WINDOW.prompt('Save node ('+node.type+') and children for sure?','y');\n            if(confirmed != 'y'){\n              return false;\n            }\n            \n            // iterate\n            // - save this one, then start saving down tree\n            let newNode = {\n              name: node.name || universe.uuidv4(),\n              nodeId: null, \n              type: node.type,\n              data: node.data,\n            }\n      \n            console.log('newNode:', newNode);\n      \n            let nodes = this.state.nodes || [];\n            nodes.push(newNode);\n            universe.lodash.set(codePackageNode, ['data','data','nodes'], nodes);\n            \n            let codePackageNode = this.props.state.codePackageNode;\n            \n            this.makeSaveRequest(codePackageNode);\n            \n            this.props.setState({\n              codePackageNode\n            });\n          \n            console.log('Saved Node', newNode);\n            console.log('Done Adding via Paste');\n      \n            try {\n              universe.EE.emit('nodes-modified', '');\n            }catch(err){\n              console.error(err);\n            }\n            \n          });\n        }\n        \n        @autobind\n        handleNewId(){\n          let uuid = universe.uuidv4();\n          universe.copy(uuid);\n          console.log('Copied to clipboard');\n        }\n        \n        @autobind\n        renderNodes(nodes, parentInFilter, currentPath){\n          \n          currentPath = currentPath || [];\n          currentPath = currentPath.join('.').split('.');\n          \n          let filter = this.state.text;\n          \n          nodes = universe.lodash.sortBy(nodes, 'updatedAt');\n          \n          return (\n            <div className=\"\">\n              {\n                nodes.map((node,idx)=>{\n                  \n                  let thisNodePath = currentPath.concat([idx]);\n                          \n                  // include this node if it, or of of it's children, matches\n                  // - highlight if a match \n                \n                  const nodeMatchFunc = (node) => {\n                    let nodeMatch;\n                    if(node.type && node.type.includes(filter)){\n                      nodeMatch = true;\n                    }\n                    if(node.name && node.name.includes(filter)){\n                      nodeMatch = true;\n                    }\n                    if(node.data && JSON.stringify(node.data).includes(filter)){\n                      nodeMatch = true;\n                    }\n                    // type (t:)\n                    if(filter.includes('t:') && node.type){\n                      let tmpFilter = filter.split('t:')[1];\n                      if(node.type && node.type.includes(tmpFilter)){\n                        nodeMatch = true;\n                      }\n                    }\n                    // name (n:)\n                    if(filter.includes('n:') && node.name){\n                      let tmpFilter = filter.split('n:')[1];\n                      if(node.name && node.name.includes(tmpFilter)){\n                        nodeMatch = true;\n                      }\n                    }\n                    // data (d:) \n                    if(filter.includes('d:')){\n                      let tmpFilter = filter.split('d:')[1];\n                      if(node.data && JSON.stringify(node.data).includes(tmpFilter)){\n                        nodeMatch = true;\n                      }\n                    }\n                    \n                    return nodeMatch;\n                    \n                  }\n                  \n                  const childMatchFunc = (nodes) => {\n                    for(let tmpNode of nodes){\n                      if(nodeMatchFunc(tmpNode)){\n                        return true;\n                      }\n                      if(childMatchFunc(tmpNode.nodes)){\n                        return true;\n                      }\n                    }\n                    return false;\n                  }\n                  \n                  let hasFilter = filter.length ? true:false;\n                  let nodeMatch;\n                  let childMatch;\n                  if(hasFilter){\n                    \n                    nodeMatch = nodeMatchFunc(node);\n                    childMatch = childMatchFunc(node.nodes || []);\n                    \n                    // check children \n                    // - lots of recursion here, probably should memoize \n                    \n                    \n                    // // filter by \"text\" if set \n                    // nodes = nodes.filter(node=>{\n                    //   return true;\n                    // })\n                  }\n                  \n                  if(hasFilter && !nodeMatch && !childMatch && !parentInFilter){\n                    return undefined; // skip\n                  }\n                  \n                  let tooltip = null;\n                  // return a different tooltip depending on the type\n                  let nodeTypeFirst = node.type ? node.type.split(':')[0]:null;\n                  try {\n                    switch(nodeTypeFirst){\n                      case 'react_component':\n                        tooltip = node.data.internalId;\n                        break;\n                        \n                      case 'parent_of_nodes_to_learn':\n                        tooltip = node.data.learn;\n                        break;\n                        \n                      case 'text_tag':\n                        tooltip = node.data.text;\n                        break;\n                        \n                      case 'capability':\n                        tooltip = node.data.key;\n                        break;\n                        \n                      case 'code':\n                        tooltip = node.data.note;\n                        break;\n                        \n                      case 'external_identity':\n                        tooltip = node.data.commonName || '(no commonName)';\n                        break;\n                        \n                      case 'external_identity_connect_method':\n                        tooltip = node.data.connection;\n                        break;\n                        \n                      case 'folder':\n                        tooltip = node.data.key;\n                        break;\n                        \n                      case 'node_repo_on_github':\n                        tooltip = node.data.repo;\n                        break;\n                        \n                      case 'app_base':\n                        tooltip = [node.data.name, node.data.appId].join(' - ');\n                        break;\n                        \n                      case 'platform_nodes':\n                        tooltip = node.data.platform;\n                        break;\n                        \n                      default:\n                        break;\n                    }\n                  }catch(err){\n                  }\n                  \n                  return (\n                    <div key={node._id}>\n                      <div onClick={e=>this.handleClickNode(node, thisNodePath)} style={{cursor:'pointer', color: nodeMatch ? 'blue':'inherit'}}>\n                    \n                          <div className=\"hover-item tooltip-holder\">\n                            <div className=\"tooltip-trigger\">\n                              {\n                                (this.props.state.packageEditingNode && this.props.state.packageEditingNode._id == node._id) ?\n                                  <strong style={{whiteSpace:'nowrap'}}>\n                                    {node.name} <span style={{opacity:\"0.7\"}}>({node.type})</span>\n                                  </strong>\n                                  :\n                                  <span style={{whiteSpace:'nowrap'}}>\n                                    {node.name} <span style={{opacity:\"0.7\"}}>({node.type})</span>\n                                  </span>\n                              }\n                            </div>\n                            {\n                              !tooltip ? '':\n                              <div className=\"tooltip\">\n                                {tooltip}\n                              </div>\n                            }\n                          </div>\n                          \n                      </div>\n                      {\n                        !(node.nodes && node.nodes.length) ? '':\n                        <div style={{paddingLeft:'8px'}}>\n                          {this.renderNodes(node.nodes, parentInFilter || nodeMatch, thisNodePath.concat(['nodes']))}\n                        </div>\n                      }\n                    </div>\n                  )\n                })\n              }\n            </div>\n          )\n        }\n        \n        render(){\n          \n          let nodes = this.state.nodes;\n          \n          // load actions from remote!\n          // - want to have some default actions that are easy to call/trigger \n          // - simple way of calling a Capability? \n          let actions = [];\n          \n          return (\n            <div className=\"\" style={{position:'relative'}}>\n              \n              <div style={{position:'sticky', top: '0px', borderBottom:'1px solid #ccc', background: '#eee', zIndex:'1', width:'100%'}}>\n                \n                {\n                  !this.state.pastable ? '':\n                  <div>\n                    <textarea className=\"textarea\" value={this.state.pasteText} onChange={e=>this.setState({pasteText:e.target.value})} />\n                    <button className=\"button is-primary\" onClick={this.handleInsertNodePaste}>Save</button>\n                    <button className=\"button pull-right\" onClick={e=>this.setState({pastable:false})}>cancel</button>\n                  </div>\n                }\n                \n                <strong>\n                  Package Nodes\n                  \n                  &nbsp;\n                  \n                  <button className={\"button is-small \" + (this.state.fetchingRemote ? 'is-loading':'')} onClick={this.fetchRemoteNodes}>\n                    <span className=\"icon is-small\">\n                      <i className=\"fa fa-refresh\"></i>\n                    </span>\n                  </button>\n                  \n                  <button className={\"button is-text is-small \"} onClick={e=>this.handleClickNode(this.props.state.codePackageNode.data.data.info, ['data','data','info'], true)}>\n                    shared_node\n                  </button>\n                  \n                  <div className=\"dropdown is-hoverable is-right pull-right\">\n                    <div className=\"dropdown-trigger\">\n                      <button className=\"button is-small\">\n                        <span className=\"icon is-small\">\n                          <i className=\"fa fa-angle-down\"></i>\n                        </span>\n                      </button>\n                    </div>\n                    <div className=\"dropdown-menu\">\n                      <div className=\"dropdown-content\">\n                      \n                        <a className=\"dropdown-item\" onClick={this.handleNewId}>\n                          Copy New UUID to Clipboard\n                        </a>\n                        \n                        <a className=\"dropdown-item\" onClick={this.handleNewNode}>\n                          New Node by Type\n                        </a>\n                        \n                        <a className=\"dropdown-item\" onClick={e=>this.setState({pastable:true})}>\n                          Insert Node By Paste\n                        </a>\n                        \n                        <a className=\"dropdown-item\" onClick={this.handleEncryptString}>\n                          Encrypt String\n                        </a>\n                        \n                      </div>\n                    </div>\n                  </div>\n                  \n                </strong>\n                \n                \n                <div>\n                  <input className=\"input\" value={this.state.text} onChange={e=>this.setState({text:e.target.value})} placeholder=\"Filter on type/name/data\" />\n                </div>\n                \n              </div>\n              \n              <div style={{position:'relative'}}>\n                {this.renderNodes(nodes, undefined, ['data','data','nodes'])}\n              </div>\n              \n            </div>\n          )\n        }\n      }\n      \n      ListComponent = universe.ReactGlobalState(ListComponent);\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: ListComponent\n      });\n      \n    }catch(err){\n      resolve({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "key": "af89c9b9-3188-4637-aef3-dbe869ad1dbe"
  }
}