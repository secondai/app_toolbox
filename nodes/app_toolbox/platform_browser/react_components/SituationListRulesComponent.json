{
  "type": "react_component:0.0.1:local:98912hd89",
  "name": "SituationListRulesComponent",
  "data": {
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----",
    "version": "1",
    "key": "d821fc20-8fe0-4ed6-8d11-1e8ba591255a",
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Select = universe.ReactSelect;\n      \n      class RuleItem extends React.Component {\n        constructor(props){\n          super(props);\n          \n          let node = this.props.ruleNode;\n          \n          this.state = {\n            node,\n            editing: false,\n          }\n        }\n        \n        componentDidMount(){\n          this.handleKeyDown();\n        }\n        \n        componentWillReceiveProps(nextProps){\n          this.setState({\n            node: nextProps.ruleNode\n          });\n        }\n        \n        @autobind\n        getNodes(){\n          \n          let matchNode = this.state.node.nodes.find(n=>{\n            return n.type.split(':')[0] == 'rule_match'\n          });\n          if(!matchNode){\n            console.error('Missing matchNode');\n            return false;\n          }\n          let actionNode = this.state.node.nodes.find(n=>{\n            return n.type.split(':')[0] == 'rule_action'\n          });\n          if(!actionNode){\n            console.error('Missing actionNode');\n            return false;\n          }\n          \n          return {\n            matchNode,\n            actionNode\n          }\n        }\n        \n        \n        @autobind\n        startEditing(){\n          console.log('startEditing', this.state.node);\n          \n          // Get nodes underneath \n          // - match (location, query as JSON) \n          // - action / code \n          let {\n            matchNode,\n            actionNode\n          } = this.getNodes();\n          \n          let query;\n          try {\n            query = JSON.stringify(JSON.parse(matchNode.data.query), null, 2);\n          }catch(err){\n            console.error('invalid query value! not a string (should have been):', this.state.node, err);\n            query = 'ERROR!'\n          }\n          \n          let code;\n          try {\n            code = actionNode.data.code;\n          }catch(err){\n            console.error('invalid code value! not a string (should have been):', this.state.node, err);\n            code = 'ERROR!'\n          }\n          \n          this.setState({\n            editing: true,\n            plain: this.state.node.data.plain,\n            locationValue: matchNode.data.location,\n            queryValue: query,\n            codeValue: code\n          });\n        }\n        \n        @autobind\n        closeEditor(){\n          this.setState({\n            editing: false\n          });\n        }\n        \n        @autobind\n        handleSave(){\n          console.log('saving');\n          \n          let {\n            matchNode,\n            actionNode\n          } = this.getNodes();\n          \n          // Verify it is an object (not an array) \n          let queryValue;\n          let value = this.state.queryValue;\n          try {\n            // todo: dirty-json! \n            queryValue = JSON.stringify(JSON.parse(value));\n          }catch(err){\n            console.error('Invalid JSON');\n            WINDOW.alert('Invalid JSON');\n            return false;\n          }\n          \n          let code = this.state.codeValue;\n          \n          let node = this.state.node;\n          node.data.plain = this.state.plain;\n          \n          matchNode.data.location = this.state.locationValue;\n          matchNode.data.query = queryValue;\n          \n          actionNode.data.code = code;\n          \n          this.props.makeSaveRequest(node);\n          this.props.makeSaveRequest(matchNode);\n          this.props.makeSaveRequest(actionNode);\n          \n          this.setState({\n            editing: false\n          });\n          \n        }\n      \n        @autobind\n        handleKeyDown(e){\n          if(this.aceRef && this.aceRef.editor){\n            this.aceRef.editor.commands.addCommand({\n              name: 'save',\n              bindKey: {\n                win: 'Ctrl-S',\n                mac: 'Command-S'\n              },\n              exec: (env, args, request)=>{\n                this.handleSave();\n              }\n            });\n            \n            // overwrite Cmd-D to same as sublime \n            this.aceRef.editor.commands.addCommand({\n              name: 'selectMoreAfter2',\n              bindKey: {\n                win: 'Ctrl-D',\n                mac: 'Command-D'\n              },\n              exec: (env, args, request)=>{\n                // selectMoreAfter\n                this.aceRef.editor.execCommand(\"selectMoreAfter\")\n              }\n            });\n          }\n      \n        }\n        \n        @autobind\n        handleDelete(){\n          \n          let node = this.state.node;\n          \n          this.props.makeDeleteRequest(node);\n          \n        }\n        \n        @autobind\n        handleUpdateLocationValue(e){\n          // TODO: add multiple groups, identities, deny rules, etc. ! \n          this.setState({\n            locationValue: e.target.value\n          });\n        }\n        \n        @autobind\n        handleClickRule(){\n          if(this.props.handleClickRule){\n            this.props.handleClickRule(this.state.node);\n          }\n        }\n        \n        render(){\n          let node = this.state.node;\n          \n          return (\n            <div>\n              { !this.state.editing ? \n                <div style={{cursor:'pointer'}}>\n                  <span onClick={this.handleClickRule}>\n                    {this.props.index + 1}. \n                    \"{\n                      node.data.plain\n                    }\" \n                  </span>\n                  <span className='icon' onClick={this.startEditing}><i className='fa fa-edit'></i></span>\n                  <span className='icon' onClick={this.handleDelete}><i className='fa fa-trash'></i></span>\n                </div>\n              :\n              <div>\n                <input type=\"text\" value={this.state.plain} onChange={e=>this.setState({plain:e.target.value})} className=\"input\" />\n            \n                <div className=\"control\">\n                \n                  <div className=\"select\">\n                    <select onChange={this.handleUpdateLocationValue} value={this.state.locationValue}>\n                      {\n                        ['before','after'].map(loc=>(\n                          <option key={loc} value={loc}>{loc}</option>\n                        ))\n                      }\n                    </select>\n                  </div>\n                  \n                </div>\n                \n                <br />\n                <div style={{height: '300px'}}>\n                  <AceEditor\n                    ref={r=>this.aceRefQuery=r}\n                    mode=\"jsx\"\n                    theme=\"monokai\"\n                    value={this.state.queryValue}\n                    onChange={queryValue=>{\n                      this.setState({queryValue});\n                    }}\n                    editorProps={{$blockScrolling: true}}\n                    width=\"100%\"\n                    height=\"100%\"\n                    onLoad={editor=>{\n                      editor.getSession().setUseWrapMode(true);\n                    }}\n                    setOptions={{\n                      enableBasicAutocompletion: true,\n                      enableLiveAutocompletion: true,\n                      showPrintMargin: false,\n                      enableSnippets: true,\n                      behavioursEnabled: false,\n                      showLineNumbers: true,\n                      tabSize: 2\n                    }}\n                  />\n                </div>\n                \n                <div style={{height: '300px'}}>\n                  <AceEditor\n                    ref={r=>this.aceRefCode=r}\n                    mode=\"jsx\"\n                    theme=\"monokai\"\n                    value={this.state.codeValue}\n                    onChange={codeValue=>{\n                      this.setState({codeValue});\n                    }}\n                    editorProps={{$blockScrolling: true}}\n                    width=\"100%\"\n                    height=\"100%\"\n                    onLoad={editor=>{\n                      editor.getSession().setUseWrapMode(true);\n                    }}\n                    setOptions={{\n                      enableBasicAutocompletion: true,\n                      enableLiveAutocompletion: true,\n                      showPrintMargin: false,\n                      enableSnippets: true,\n                      behavioursEnabled: false,\n                      showLineNumbers: true,\n                      tabSize: 2\n                    }}\n                  />\n                </div>\n                \n                <div className=\"field is-grouped\">\n                  <p className=\"control\">\n                    <button className=\"button is-success\" onClick={this.handleSave}>\n                      Save\n                    </button>\n                  </p>\n                  <p className=\"control\">  \n                    <button className=\"button is-default\" onClick={this.closeEditor}>\n                      Cancel\n                    </button>\n                  </p>\n                </div>\n                \n              </div>\n              }\n              \n            </div>\n          )\n        }\n      }\n                    \n      class RuleList extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              {this.props.items.map((value, index) => (\n                <RuleItem \n                  key={`item-${index}`} \n                  index={index} \n                  ruleNode={value} \n                  makeSaveRequest={this.props.makeSaveRequest}\n                  makeDeleteRequest={this.props.makeDeleteRequest}\n                  handleClickRule={this.props.handleClickRule}\n                />\n              ))}\n            </div>\n          );\n        }\n      }\n      \n      \n    \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          \n          this.state = {\n            PossibleRuleNodes: [],\n            options: [],\n            value: null, // Select.Creatable value (value.node if existing) \n            queryValue: null,\n            codeValue: '',\n            locationValue: ''\n          }\n          \n        }\n        \n        componentDidMount(){\n          if(this.props.initEditComponent){\n            this.props.initEditComponent(this);\n          }\n          \n          this.fetchPossibleRules();\n        }\n        \n        @autobind\n        fetchPossibleRules(){\n          // get all posibilities for \"situation_match_builder\" nodes \n          return new Promise(async (resolve,reject)=>{\n              \n            try {\n              \n              this.setState({\n                fetchingMatches: true\n              })\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          \n                          {\n                            matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                            dataForAction: {\n                              type: 'string:...',\n                              data: this.props.state.OwnerSecondExternalIdentityNode.data.token\n                            }\n                          },\n                      \n                          {\n                            matchActionType: 'search_internal_datasource:0.0.1:local:2h3ufih8s9h2f',\n                            dataForAction: {\n                              type: 'standard_query_request:0.0.1:local:65723f2khfds',\n                              data: {\n                                dataFilter: {\n                                  'type' : {\n                                    $like: 'action_rule:'\n                                  },\n                                  nodeId: null // root-level only!\n                                },\n                                matchFunctionNode: null\n                              }\n                            }\n                          }\n                          \n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              // let nodes = universe.lodash.find(response.data.actionResponses[0].data[0].nodes,{type: 'code:0.0.1:local:32498h32f2'});\n              let nodes = response.data.actionResponses[1].data;\n              \n              // Create trees from nodes (in_reply_to) \n              // - get all of my unique Posts \n              let PossibleRuleNodes = nodes;\n              \n              \n              console.log('PossibleRuleNodes', PossibleRuleNodes);\n              \n              let options = PossibleRuleNodes.map(node=>{\n                return {\n                  label: node.data.plain,\n                  value: node._id,\n                  node\n                }\n              })\n              \n              // let componentNode = await universe.runInVM(result[0],{});\n              this.setState({\n                PossibleRuleNodes,\n                options\n              })\n              \n            } catch(err){\n              console.error('Failed getting local nodes');\n            }\n          \n            this.setState({\n              fetchingMatches: false\n            })\n            \n          });\n          \n        }\n        \n        @autobind\n        handleClickRule(node){\n          this.handleOnChangeNew({\n            // label,\n            // value,\n            node\n          })\n        }\n        \n        @autobind\n      \thandleOnChangeNew(value){\n      \t  \n      \t  if(!value){\n      \t    return this.setState({value});\n      \t  }\n      \t  \n      \t  // console.log('VALUE:', value);\n      \t \n      \t  let matchNode,\n      \t    actionNode;\n      \t \n      \t  // new or existing?\n      \t  if(value.node){\n        \t   // existing \n            matchNode = value.node.nodes.find(n=>{\n              return n.type.split(':')[0] == 'rule_match'\n            });\n            if(!matchNode){\n              console.error('Missing matchNode');\n              matchNode = {data:{query: '{}', location: 'before'}};\n            }\n            actionNode = value.node.nodes.find(n=>{\n              return n.type.split(':')[0] == 'rule_action'\n            });\n            if(!actionNode){\n              console.error('Missing actionNode');\n              actionNode = {data: {code: ''}}\n            }\n      \t  } else {\n      \t    // new\n      \t    value.node = {\n      \t      data: {\n      \t        plain: value.label,\n      \t        query: \"{}\",\n      \t      }\n      \t    }\n            matchNode = {data:{location:'before',query: '{}'}};\n            actionNode = {data:{code: ''}};\n          }\n      \t  \n          let queryValue;\n          try {\n            queryValue = JSON.stringify(JSON.parse(matchNode.data.query), null, 2);\n          }catch(err){\n            console.error('invalid query value! not a string (should have been):', this.state.node, err);\n            queryValue = 'ERROR!'\n          }\n          \n          let locationValue = matchNode.data.location;\n          \n          let codeValue;\n          try {\n            codeValue = actionNode.data.code;\n          }catch(err){\n            console.error('invalid code value! not a string (should have been):', this.state.node, err);\n            codeValue = 'ERROR!'\n          }\n          \n      \t\tthis.setState({ \n      \t\t  value,\n      \t\t  locationValue,\n      \t\t  plainValue: value.node.data.plain,\n      \t\t  queryValue,\n      \t\t  codeValue\n      \t\t});\n      \t}\n        \n        @autobind\n        async handleCreateRuleNode(){\n          \n          let query;\n          let value = this.state.queryValue;\n          try {\n            // todo: dirty-json! \n            query = JSON.stringify(JSON.parse(value));\n          }catch(err){\n            console.error('Invalid JSON');\n            WINDOW.alert('Invalid JSON');\n            return false;\n          }\n          \n          let code = this.state.codeValue;\n          \n          \n          // TODO: bulk save (save all child nodes) \n          \n          let newRootNode = {\n            nodeId: null,\n            name: universe.uuidv4(),\n            type: 'action_rule:Qmf230fj23f9',\n            data: {\n              plain: this.state.plainValue\n            }\n          }\n          \n          let savedRootNode = await this.createNodeOnSecond(newRootNode);\n          console.log('savedRootNode', savedRootNode);\n          \n          let newMatchNode = {\n            nodeId: savedRootNode.data._id, // response is a node containing new node \n            name: universe.uuidv4(),\n            type: 'rule_match:Qmf23032',\n            data: {\n              location: this.state.locationValue,\n              query\n            }\n          }\n          \n          let newActionNode = {\n            nodeId: savedRootNode.data._id, \n            name: universe.uuidv4(),\n            type: 'rule_action:Qmf3290j',\n            data: {\n              code\n            }\n          }\n          \n          let savedMatchNode = await this.createNodeOnSecond(newMatchNode);\n          let savedActionNode = await this.createNodeOnSecond(newActionNode);\n          \n          console.log('savedMatchNode',savedMatchNode);\n          console.log('savedActionNode',savedActionNode);\n          \n          this.setState({\n            value: null,\n            plainValue: null,\n            queryValue: null,\n            codeValue: null\n          });\n          \n          \n          // update rules\n          this.fetchPossibleRules();\n          \n        }\n        \n        @autobind\n        handleUpdateLocationValue(e){\n          // TODO: add multiple groups, identities, deny rules, etc. ! \n          this.setState({\n            locationValue: e.target.value\n          });\n        }\n        \n        @autobind\n        makeSaveRequest(nodeToSave, opts, skipEvent){\n          return new Promise(async (resolve, reject) => {\n            \n            this.setState({\n              saving: true\n            })\n            \n            opts = opts || {};\n            \n            // Make request to save Node on remote \n            try {\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          {\n                            matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                            dataForAction: {\n                              type: 'string:...',\n                              data: this.props.state.OwnerSecondExternalIdentityNode.data.token\n                            }\n                          },\n                          {\n                            matchActionType: 'update_node:0.0.2:local:392821982y3',\n                            dataForAction: {\n                              type: 'update_node_data:0.0.2:local:123445',\n                              data: {\n                                optionsNode: {\n                                  type: 'options_generic:0.0.1:local:289f3j29832',\n                                  data: opts || {}\n                                },\n                                dataNode: nodeToSave\n                              }\n                            }\n                          }\n                        ]\n                        \n                      }\n                    }\n                  }\n                }\n              });\n              \n              console.log('Update response:', response);\n              \n              if(skipEvent !== true){\n                try {\n                  universe.EE.emit('nodes-modified', '');\n                }catch(err){\n                  console.error(err);\n                }\n              }\n              \n              this.setState({\n                saving: false\n              })\n              \n              return resolve({\n                type: 'node:...',\n                data: response.data.actionResponses[1]\n              });\n              \n            } catch(err){\n              console.error('Failed getting local nodes');\n              \n              alert('Failed');\n              \n              this.setState({\n                saving: false\n              })\n              \n              return reject();\n              \n            }\n            \n          })\n        }\n        \n        @autobind\n        async makeDeleteRequest(node){\n          // removes from list also \n          \n          // remove immediately from ui \n          let PossibleRuleNodes = this.state.PossibleRuleNodes;\n          universe.lodash.remove(PossibleRuleNodes, n=>{\n            return n._id == node._id;\n          });\n          \n          this.setState({\n            PossibleRuleNodes\n          });\n          \n          node.active = false;\n          \n          await this.makeSaveRequest(node);\n          \n          this.fetchPossibleRules();\n          \n        }\n        \n        @autobind\n        createNodeOnSecond(nodeToSave){\n          return new Promise(async (resolve, reject) => {\n            \n            console.log('NewNode:', nodeToSave);\n                \n            // Make request to save Node on remote \n            try {\n              \n              let response = await universe.loadAndRunCapability('TalkToSecond',{},{\n                type: 'standard_capability_action:0.0.1:local:298j291bs',\n                data: {\n                  action: 'send',\n                  options: {\n                    ExternalIdentityNode: this.props.state.OwnerSecondExternalIdentityNode,\n                    RequestNode: {\n                      type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n                      data: {\n                        actions: [\n                          \n                          {\n                            matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n                            dataForAction: {\n                              type: 'string:...',\n                              data: this.props.state.OwnerSecondExternalIdentityNode.data.token\n                            }\n                          },\n                          \n                          {\n                            matchActionType: 'create_node:Qmf3892j39f8h9babb',\n                            dataForAction: {\n                              type: 'create_node_data:Qmdslkfj29f0j82',\n                              data: {\n                                optionsNode: {\n                                  type: 'options_generic:0.0.1:local:289f3j29832',\n                                  data: {}\n                                },\n                                dataNode: nodeToSave\n                              }\n                            }\n                          }\n                        ]\n                      }\n                    }\n                  }\n                }\n              });\n              \n              console.log('create_node response:', response);\n              \n              // get the created node \n              let savedNode = response.data.actionResponses[1];\n              \n              return resolve(savedNode);\n              \n            } catch(err){\n              console.error('Failed creating new node', err);\n            }\n            \n          })\n        }\n        \n        render(){\n          \n          // this.setState({\n          //   builderNodes\n          // });\n          // let builderNodes = this.state.builderNodes;\n          \n          return (\n            <div>\n              <link rel=\"stylesheet\" type=\"text/css\" href='https://unpkg.com/react-select@1.2.1/dist/react-select.css' />\n              \n              <RuleList \n                items={this.state.PossibleRuleNodes} \n                makeSaveRequest={this.makeSaveRequest}\n                makeDeleteRequest={this.makeDeleteRequest}\n                handleClickRule={this.handleClickRule}\n              />\n              \n              <br />\n              <div>\n                \n                <Select\n        \t\t\t\t\tmulti={false}\n        \t\t\t\t\toptions={this.state.options}\n        \t\t\t\t\tonChange={this.handleOnChangeNew}\n        \t\t\t\t\tvalue={this.state.value}\n        \t\t\t\t\tshowNewOptionAtTop={true}\n        \t\t\t\t\topenOnClick={false}\n        \t\t\t\t\tshouldKeyDownEventCreateNewOption={()=>{}}\n        \t\t\t\t/>\n        \t\t\t\t\n                { !this.state.queryValue ? '':\n                <div>\n            \n                  <div className=\"control\">\n                  \n                    <input type=\"text\" value={this.state.plainValue} onChange={e=>this.setState({plainValue:e.target.value})} className=\"input\" />\n                    \n                  </div>\n            \n            \n                  <div className=\"control\">\n                  \n                    <div className=\"select\">\n                      <select onChange={this.handleUpdateLocationValue} value={this.state.locationValue}>\n                        {\n                          ['before','after'].map(loc=>(\n                            <option key={loc} value={loc}>{loc}</option>\n                          ))\n                        }\n                      </select>\n                    </div>\n                    \n                  </div>\n                  \n                  <div style={{height: '300px'}}>\n                    <AceEditor\n                      ref={r=>this.aceRef=r}\n                      mode=\"jsx\"\n                      theme=\"monokai\"\n                      value={this.state.queryValue}\n                      onChange={queryValue=>{\n                        this.setState({queryValue});\n                      }}\n                      editorProps={{$blockScrolling: true}}\n                      width=\"100%\"\n                      height=\"100%\"\n                      onLoad={editor=>{\n                        editor.getSession().setUseWrapMode(true);\n                      }}\n                      setOptions={{\n                        enableBasicAutocompletion: true,\n                        enableLiveAutocompletion: true,\n                        showPrintMargin: false,\n                        enableSnippets: true,\n                        behavioursEnabled: false,\n                        showLineNumbers: true,\n                        tabSize: 2\n                      }}\n                    />\n                  </div>\n                    \n                  <div style={{height: '300px'}}>\n                    <AceEditor\n                      ref={r=>this.aceRefCode=r}\n                      mode=\"jsx\"\n                      theme=\"monokai\"\n                      value={this.state.codeValue}\n                      onChange={codeValue=>{\n                        this.setState({codeValue});\n                      }}\n                      editorProps={{$blockScrolling: true}}\n                      width=\"100%\"\n                      height=\"100%\"\n                      onLoad={editor=>{\n                        editor.getSession().setUseWrapMode(true);\n                      }}\n                      setOptions={{\n                        enableBasicAutocompletion: true,\n                        enableLiveAutocompletion: true,\n                        showPrintMargin: false,\n                        enableSnippets: true,\n                        behavioursEnabled: false,\n                        showLineNumbers: true,\n                        tabSize: 2\n                      }}\n                    />\n                  </div>\n                </div>\n                }\n                \n                <button className=\"button is-primary\" onClick={this.handleCreateRuleNode}>\n                  Save New\n                </button>\n                \n              </div>\n            </div>\n          )\n\n        }\n      }\n      \n      mycomponent = universe.sharedComponents.withEditableNodeInfo(mycomponent, {\n        localNode: SELF\n      });\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      mycomponent = universe.ReactRouterDomWithRouter(mycomponent);\n      \n            \n      const styles = {\n        deleteIcon: {\n          position: 'absolute',\n          top: '0px',\n          right: '-24px',\n          cursor: 'pointer'\n        }\n      }\n      \n      resolve({\n        type: 'react_component:0.0.1:local:98912hd89',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      console.error(err);\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()",
    "internalId": "SituationListRulesComponent"
  }
}